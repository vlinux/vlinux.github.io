import { ViteSSGOptions } from 'vite-ssg';
import * as vite from 'vite';
import { UserConfig as UserConfig$1, InlineConfig } from 'vite';
import { D as DefaultThemeConfig, U as UserSiteConfig, P as PartialDeep, S as SiteConfig } from '../config-bae39f59.js';
import Vue from '@vitejs/plugin-vue';
import Components from 'unplugin-vue-components/vite';
import { VitePluginConfig } from 'unocss/vite';
import Pages from 'vite-plugin-pages';
import { presetUno, presetAttributify, presetIcons, presetTypography } from 'unocss';
import MarkdownIt from 'markdown-it';
import { Theme } from 'shiki';
import anchorPlugin from 'markdown-it-anchor';
import { KatexOptions } from 'katex';
import { FrontmatterPluginOptions } from '@mdit-vue/plugin-frontmatter';
import { HeadersPluginOptions } from '@mdit-vue/plugin-headers';
import { SfcPluginOptions } from '@mdit-vue/plugin-sfc';
import { TocPluginOptions } from '@mdit-vue/plugin-toc';
import { Awaitable } from '@antfu/utils';

declare module 'vite' {
    interface UserConfig {
        ssgOptions?: ViteSSGOptions;
    }
}

interface BlockItem {
    text?: string;
    icon?: string;
    color?: string;
    /**
     * for i18n
     */
    langs?: {
        [key: string]: string;
    };
}
interface Blocks {
    tip?: BlockItem;
    warning?: BlockItem;
    danger?: BlockItem;
    info?: BlockItem;
    details?: BlockItem;
}

declare type ThemeOptions = Theme | {
    light: Theme;
    dark: Theme;
};
interface MarkdownOptions {
    /**
     * markdown-it options
     */
    options?: MarkdownIt.Options;
    /**
     * config markdown-it
     */
    config?: (md: MarkdownIt) => void;
    anchor?: anchorPlugin.AnchorOptions;
    attrs?: {
        leftDelimiter?: string;
        rightDelimiter?: string;
        allowedAttributes?: string[];
        disable?: boolean;
    };
    frontmatter?: FrontmatterPluginOptions;
    headers?: HeadersPluginOptions;
    sfc?: SfcPluginOptions;
    toc?: TocPluginOptions;
    katex?: KatexOptions;
    /**
     * shiki
     */
    theme?: ThemeOptions;
    /**
     * Custom block configurations
     */
    blocks?: Blocks;
    externalLinks?: Record<string, string>;
}

declare type ValaxyConfig<ThemeConfig = DefaultThemeConfig> = UserSiteConfig<ThemeConfig> & ValaxyExtendConfig;
declare type UserConfig<ThemeConfig = DefaultThemeConfig> = ValaxyConfig<ThemeConfig>;
/**
 * fn with options for theme config
 */
declare type ValaxyConfigFn<ThemeConfig = DefaultThemeConfig> = (options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyConfig | Promise<ValaxyConfig>;
declare type ValaxyConfigExport<ThemeConfig = DefaultThemeConfig> = ValaxyConfig<ThemeConfig> | ValaxyConfigFn<ThemeConfig>;
interface ValaxyExtendConfig {
    vite?: UserConfig$1;
    vue?: Parameters<typeof Vue>[0];
    components?: Parameters<typeof Components>[0];
    unocss?: VitePluginConfig;
    /**
     * unocss presets
     */
    unocssPresets?: {
        uno?: Parameters<typeof presetUno>[0];
        attributify?: Parameters<typeof presetAttributify>[0];
        icons?: Parameters<typeof presetIcons>[0];
        typography?: Parameters<typeof presetTypography>[0];
    };
    pages?: Parameters<typeof Pages>[0];
    /**
     * for markdown
     */
    markdown?: MarkdownOptions;
    extendMd?: (ctx: {
        route: {
            meta: {
                frontmatter?: Record<string, any>;
                layout?: string;
            } & {};
            path: string;
            component: string;
        };
        data: Readonly<Record<string, any>>;
        content: string;
        excerpt?: string;
        path: string;
    }) => void;
    addons?: ValaxyAddonOptions;
}
interface ValaxyAddon {
    global?: boolean;
    props?: Record<string, any>;
    options?: Record<string, any>;
}
declare type ValaxyAddonLike = ValaxyAddon | false | null | undefined;
declare type ValaxyAddonOptions = ([string, ValaxyAddonLike] | string)[] | Record<string, ValaxyAddonLike>;
declare type ValaxyAddonFn<ThemeConfig = DefaultThemeConfig> = (addonOptions: ValaxyAddonResolver, valaxyOptions: ResolvedValaxyOptions<ThemeConfig>) => ValaxyConfig | Promise<ValaxyConfig>;
declare type ValaxyAddonExport<ThemeConfig = DefaultThemeConfig> = ValaxyConfig<ThemeConfig> | ValaxyAddonFn<ThemeConfig>;
interface ValaxyAddonResolver {
    name: string;
    root: string;
    enable: boolean;
    global: boolean;
    props: Record<string, any>;
    options: Record<string, any>;
    configFile?: string;
}

interface ValaxyEntryOptions {
    /**
     * theme name
     */
    theme?: string;
    userRoot?: string;
}
interface ResolvedValaxyOptions<ThemeConfig = DefaultThemeConfig> {
    mode: 'dev' | 'build';
    /**
     * package.json root
     */
    pkgRoot: string;
    /**
     * Client root path
     * @default 'valaxy/client'
     */
    clientRoot: string;
    /**
     * User root path
     * @default process.cwd()
     */
    userRoot: string;
    /**
     * Theme root path
     */
    themeRoot: string;
    /**
     * Addon root path
     */
    addonRoots: string[];
    /**
     * Theme name
     */
    roots: string[];
    theme: string;
    /**
     * Valaxy Config
     */
    config: ValaxyConfig<ThemeConfig>;
    /**
     * config file path
     */
    configFile: string;
    pages: string[];
    /**
     * all addons
     * Record<package-name, OptionResolver>
     */
    addons: ValaxyAddonResolver[];
}
interface ValaxyServerOptions {
    onConfigReload?: (newConfig: ValaxyConfig, config: ValaxyConfig, force?: boolean) => void;
}
declare function resolveOptions(options: ValaxyEntryOptions, mode?: ResolvedValaxyOptions['mode']): Promise<ResolvedValaxyOptions<DefaultThemeConfig>>;

/**
 * merge vite.config.ts (user & theme)
 * @internal
 * @param param
 * @param command
 * @returns
 */
declare function mergeViteConfigs({ userRoot, themeRoot }: ResolvedValaxyOptions, command: 'serve' | 'build'): Promise<InlineConfig>;
/**
 * generate index.html from user/theme/client
 * @internal
 * @param
 * @returns
 */
declare function getIndexHtml({ clientRoot, themeRoot, userRoot, config }: ResolvedValaxyOptions): Promise<string>;

declare function build(options: ResolvedValaxyOptions, viteConfig?: InlineConfig): Promise<void>;
declare function ssgBuild(options: ResolvedValaxyOptions, viteConfig?: InlineConfig): Promise<void>;

/**
 * Type site helper
 */
declare function defineSite<ThemeConfig>(config: UserSiteConfig<ThemeConfig>): PartialDeep<SiteConfig<ThemeConfig>>;
/**
 * Type site helper for custom theme site
 */
declare function defineSiteWithTheme<ThemeConfig>(config: UserSiteConfig<ThemeConfig>): PartialDeep<SiteConfig<ThemeConfig>>;
/**
 * Type valaxy config helper
 */
declare function defineConfig<ThemeConfig>(config: UserConfig<ThemeConfig>): UserConfig<ThemeConfig>;
declare type ValaxyConfigExtendKey = 'vite' | 'vue' | 'unocss' | 'unocssPresets' | 'markdown' | 'extendMd' | 'addons';
declare type ValaxyPickConfig = Pick<ValaxyConfig, ValaxyConfigExtendKey>;
declare type ValaxyTheme<ThemeConfig = DefaultThemeConfig> = ValaxyPickConfig & {
    themeConfig?: ThemeConfig;
};
declare function defineTheme<ThemeConfig = DefaultThemeConfig>(theme: ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>)): ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>);
declare function defineAddon(addon: ValaxyPickConfig | ((addonOptions: ValaxyAddonResolver, valaxyOptions: ResolvedValaxyOptions) => ValaxyPickConfig)): ValaxyPickConfig | ((addonOptions: ValaxyAddonResolver, valaxyOptions: ResolvedValaxyOptions) => ValaxyPickConfig);
declare const defaultSiteConfig: SiteConfig;
declare type UnoSetup = () => Awaitable<Partial<VitePluginConfig> | undefined>;
declare function defineUnoSetup(fn: UnoSetup): UnoSetup;

declare function createServer(options: ResolvedValaxyOptions, viteConfig?: InlineConfig, serverOptions?: ValaxyServerOptions): Promise<vite.ViteDevServer>;

export { ResolvedValaxyOptions, UnoSetup, UserConfig, ValaxyAddon, ValaxyAddonExport, ValaxyAddonFn, ValaxyAddonLike, ValaxyAddonOptions, ValaxyAddonResolver, ValaxyConfig, ValaxyConfigExport, ValaxyConfigExtendKey, ValaxyConfigFn, ValaxyEntryOptions, ValaxyExtendConfig, ValaxyPickConfig, ValaxyServerOptions, ValaxyTheme, build, createServer, defaultSiteConfig, defineAddon, defineConfig, defineSite, defineSiteWithTheme, defineTheme, defineUnoSetup, getIndexHtml, mergeViteConfigs, resolveOptions, ssgBuild };
