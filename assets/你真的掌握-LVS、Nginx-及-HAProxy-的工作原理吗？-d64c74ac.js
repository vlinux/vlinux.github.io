import{_ as r}from"./ValaxyMain-f213af34.js";import{_ as d,p as _,c as h,w as e,o as u,r as t,b as n,R as l}from"./app-89585ffb.js";import"./YunFooter-77f4780b.js";import"./YunCard-951cfd57.js";import"./YunPageHeader-9188f91f.js";const mn=JSON.parse('{"title":"你真的掌握 LVS、Nginx 及 HAProxy 的工作原理吗？","description":"","frontmatter":{"title":"你真的掌握 LVS、Nginx 及 HAProxy 的工作原理吗？","categories":"Linux技术","tags":["Nginx","Haproxy","Lvs"],"date":"2019-07-14T09:51:00.000Z"},"headers":[{"level":2,"title":"1 LVS的体系结构","slug":"_1-lvs的体系结构","link":"#_1-lvs的体系结构","children":[]},{"level":2,"title":"2 LVS 负载均衡机制","slug":"_2-lvs-负载均衡机制","link":"#_2-lvs-负载均衡机制","children":[]},{"level":2,"title":"3 NAT 模式：网络地址转换","slug":"_3-nat-模式：网络地址转换","link":"#_3-nat-模式：网络地址转换","children":[]},{"level":2,"title":"4 DR 模式：直接路由","slug":"_4-dr-模式：直接路由","link":"#_4-dr-模式：直接路由","children":[]},{"level":2,"title":"5 LVS的优点","slug":"_5-lvs的优点","link":"#_5-lvs的优点","children":[]},{"level":2,"title":"6 LVS的缺点","slug":"_6-lvs的缺点","link":"#_6-lvs的缺点","children":[]},{"level":2,"title":"1 Nignx 的架构设计","slug":"_1-nignx-的架构设计","link":"#_1-nignx-的架构设计","children":[]},{"level":2,"title":"2 Nginx 负载均衡","slug":"_2-nginx-负载均衡","link":"#_2-nginx-负载均衡","children":[]},{"level":2,"title":"3 Nginx 的优点","slug":"_3-nginx-的优点","link":"#_3-nginx-的优点","children":[]},{"level":2,"title":"4 Nginx 的缺点","slug":"_4-nginx-的缺点","link":"#_4-nginx-的缺点","children":[]}],"relativePath":"pages/posts/你真的掌握-LVS、Nginx-及-HAProxy-的工作原理吗？.md","path":"/Users/vlinux/vlinux/blog/valaxy/vlinux.github.io/pages/posts/你真的掌握-LVS、Nginx-及-HAProxy-的工作原理吗？.md","lastUpdated":1671090556000}'),s=JSON.parse('{"title":"你真的掌握 LVS、Nginx 及 HAProxy 的工作原理吗？","description":"","frontmatter":{"title":"你真的掌握 LVS、Nginx 及 HAProxy 的工作原理吗？","categories":"Linux技术","tags":["Nginx","Haproxy","Lvs"],"date":"2019-07-14T09:51:00.000Z"},"headers":[{"level":2,"title":"1 LVS的体系结构","slug":"_1-lvs的体系结构","link":"#_1-lvs的体系结构","children":[]},{"level":2,"title":"2 LVS 负载均衡机制","slug":"_2-lvs-负载均衡机制","link":"#_2-lvs-负载均衡机制","children":[]},{"level":2,"title":"3 NAT 模式：网络地址转换","slug":"_3-nat-模式：网络地址转换","link":"#_3-nat-模式：网络地址转换","children":[]},{"level":2,"title":"4 DR 模式：直接路由","slug":"_4-dr-模式：直接路由","link":"#_4-dr-模式：直接路由","children":[]},{"level":2,"title":"5 LVS的优点","slug":"_5-lvs的优点","link":"#_5-lvs的优点","children":[]},{"level":2,"title":"6 LVS的缺点","slug":"_6-lvs的缺点","link":"#_6-lvs的缺点","children":[]},{"level":2,"title":"1 Nignx 的架构设计","slug":"_1-nignx-的架构设计","link":"#_1-nignx-的架构设计","children":[]},{"level":2,"title":"2 Nginx 负载均衡","slug":"_2-nginx-负载均衡","link":"#_2-nginx-负载均衡","children":[]},{"level":2,"title":"3 Nginx 的优点","slug":"_3-nginx-的优点","link":"#_3-nginx-的优点","children":[]},{"level":2,"title":"4 Nginx 的缺点","slug":"_4-nginx-的缺点","link":"#_4-nginx-的缺点","children":[]}],"relativePath":"pages/posts/你真的掌握-LVS、Nginx-及-HAProxy-的工作原理吗？.md","path":"/Users/vlinux/vlinux/blog/valaxy/vlinux.github.io/pages/posts/你真的掌握-LVS、Nginx-及-HAProxy-的工作原理吗？.md","lastUpdated":1671090556000}'),c={name:"pages/posts/你真的掌握-LVS、Nginx-及-HAProxy-的工作原理吗？.md",data(){return{data:s,frontmatter:s.frontmatter}},setup(){_("pageData",s)}},x=n("blockquote",null,[n("p",null,"当前大多数的互联网系统都使用了服务器集群技术，集群是将相同服务部署在多台服务器上构成一个集群整体对外提供服务，这些集群可以是 Web应用服务器集群，也可以是数据库服务器集群，还可以是分布式缓存服务器集群等等。")],-1),g=n("p",null,"在实际应用中，在 Web 服务器集群之前总会有一台负载均衡服务器，负载均衡设备的任务就是作为 Web 服务器流量的入口，挑选最合适的一台 Web 服务器，将客户端的请求转发给它处理，实现客户端到真实服务端的透明转发。",-1),p=n("p",null,"最近几年很火的「云计算」以及分布式架构，本质上也是将后端服务器作为计算资源、存储资源，由某台管理服务器封装成一个服务对外提供，客户端不需要关心真正提供服务的是哪台机器，在它看来，就好像它面对的是一台拥有近乎无限能力的服务器，而本质上，真正提供服务的，是后端的集群。",-1),S=n("p",null,"LVS、Nginx、HAProxy 是目前使用最广泛的三种软件负载均衡软件。",-1),v=n("p",null,"一般对负载均衡的使用是随着网站规模的提升根据不同的阶段来使用不同的技术。具体的应用需求还得具体分析，如果是中小型的 Web 应用，比如日 PV 小于1000万，用 Nginx 就完全可以了；",-1),L=n("p",null,"如果机器不少，可以用 DNS 轮询，LVS 所耗费的机器还是比较多的；大型网站或重要的服务，且服务器比较多时，可以考虑用 LVS。 目前关于网站架构一般比较合理流行的架构方案：Web 前端采用 Nginx/HAProxy+Keepalived 作负载均衡器；后端采用 MySQ L数据库一主多从和读写分离，采用 LVS+Keepalived 的架构。",-1),V=n("h1",{id:"lvs",tabindex:"-1"},[l("LVS "),n("a",{class:"header-anchor",href:"#lvs","aria-hidden":"true"},"#")],-1),N=n("hr",null,null,-1),P=n("p",null,"LVS 是 Linux Virtual Server 的简称，也就是 Linux 虚拟服务器。现在 LVS 已经是 Linux 标准内核的一部分，从 Linux2.4 内核以后，已经完全内置了 LVS 的各个功能模块，无需给内核打任何补丁，可以直接使用 LVS 提供的各种功能。",-1),m=n("p",null,"LVS 自从1998年开始，发展到现在已经是一个比较成熟的技术项目了。",-1),f=n("h2",{id:"_1-lvs的体系结构",tabindex:"-1"},[l("1 LVS的体系结构 "),n("a",{class:"header-anchor",href:"#_1-lvs的体系结构","aria-hidden":"true"},"#")],-1),y=n("p",null,"LVS 架设的服务器集群系统有三个部分组成： (1) 最前端的负载均衡层，用 Load Balancer 表示。 (2) 中间的服务器集群层，用 Server Array 表示。 (3) 最底端的数据共享存储层，用 Shared Storage 表示。",-1),A=n("h2",{id:"_2-lvs-负载均衡机制",tabindex:"-1"},[l("2 LVS 负载均衡机制 "),n("a",{class:"header-anchor",href:"#_2-lvs-负载均衡机制","aria-hidden":"true"},"#")],-1),k=n("p",null,"LVS 不像 HAProxy 等七层软负载面向的是 HTTP 包，所以七层负载可以做的 URL 解析等工作，LVS 无法完成。",-1),b=n("p",null,"LVS 是四层负载均衡，也就是说建立在 OSI 模型的第四层——传输层之上，传输层上有我们熟悉的 TCP/UDP，LVS 支持 TCP/UDP 的负载均衡。因为 LVS 是四层负载均衡，因此它相对于其它高层负载均衡的解决办法，比如 DNS 域名轮流解析、应用层负载的调度、客户端的调度等，它的效率是非常高的。",-1),H=n("p",null,"所谓四层负载均衡 ，也就是主要通过报文中的目标地址和端口。七层负载均衡 ，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容。",-1),R=n("p",null,"LVS 的转发主要通过修改 IP 地址（NAT 模式，分为源地址修改 SNAT 和目标地址修改 DNAT）、修改目标 MAC（DR 模式）来实现。",-1),T=n("h2",{id:"_3-nat-模式：网络地址转换",tabindex:"-1"},[l("3 NAT 模式：网络地址转换 "),n("a",{class:"header-anchor",href:"#_3-nat-模式：网络地址转换","aria-hidden":"true"},"#")],-1),I=n("p",null,"NAT（Network Address Translation）是一种外网和内网地址映射的技术。",-1),D=n("p",null,"NAT 模式下，网络数据报的进出都要经过 LVS 的处理。LVS 需要作为 RS（真实服务器）的网关。",-1),w=n("p",null,"当包到达 LVS 时，LVS 做目标地址转换（DNAT），将目标 IP 改为 RS 的 IP。RS 接收到包以后，仿佛是客户端直接发给它的一样。RS 处理完，返回响应时，源 IP 是 RS IP，目标 IP 是客户端的 IP。",-1),$=n("p",null,"这时 RS 的包通过网关（LVS）中转，LVS 会做源地址转换（SNAT），将包的源地址改为 VIP，这样，这个包对客户端看起来就仿佛是 LVS 直接返回给它的。",-1),M=n("h2",{id:"_4-dr-模式：直接路由",tabindex:"-1"},[l("4 DR 模式：直接路由 "),n("a",{class:"header-anchor",href:"#_4-dr-模式：直接路由","aria-hidden":"true"},"#")],-1),C=n("p",null,"DR 模式下需要 LVS 和 RS 集群绑定同一个 VIP（RS 通过将 VIP 绑定在 loopback 实现），但与 NAT 的不同点在于：请求由 LVS 接受，由真实提供服务的服务器（RealServer，RS）直接返回给用户，返回的时候不经过 LVS。 详细来看，一个请求过来时，LVS 只需要将网络帧的 MAC 地址修改为某一台 RS 的 MAC，该包就会被转发到相应的 RS 处理，注意此时的源 IP 和目标 IP 都没变，LVS 只是做了一下移花接木。RS 收到 LVS 转发来的包时，链路层发现 MAC 是自己的，到上面的网络层，发现 IP 也是自己的，于是这个包被合法地接受，RS 感知不到前面有 LVS 的存在。而当 RS 返回响应时，只要直接向源 IP（即用户的 IP）返回即可，不再经过 LVS。",-1),U=n("p",null,"DR 负载均衡模式数据分发过程中不修改 IP 地址，只修改 mac 地址，由于实际处理请求的真实物理 IP 地址和数据请求目的 IP 地址一致，所以不需要通过负载均衡服务器进行地址转换，可将响应数据包直接返回给用户浏览器，避免负载均衡服务器网卡带宽成为瓶颈。因此，DR 模式具有较好的性能，也是目前大型网站使用最广泛的一种负载均衡手段。",-1),W=n("h2",{id:"_5-lvs的优点",tabindex:"-1"},[l("5 LVS的优点 "),n("a",{class:"header-anchor",href:"#_5-lvs的优点","aria-hidden":"true"},"#")],-1),K=n("ul",null,[n("li",null,"抗负载能力强、是工作在传输层上仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和 cpu 资源消耗比较低。"),n("li",null,"配置性比较低，这是一个缺点也是一个优点，因为没有可太多配置的东西，所以并不需要太多接触，大大减少了人为出错的几率。"),n("li",null,"工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如 LVS+Keepalived。"),n("li",null,"无流量，LVS 只分发请求，而流量并不从它本身出去，这点保证了均衡器 IO 的性能不会受到大流量的影响。"),n("li",null,"应用范围比较广，因为 LVS 工作在传输层，所以它几乎可以对所有应用做负载均衡，包括 http、数据库、在线聊天室等等。")],-1),O=n("h2",{id:"_6-lvs的缺点",tabindex:"-1"},[l("6 LVS的缺点 "),n("a",{class:"header-anchor",href:"#_6-lvs的缺点","aria-hidden":"true"},"#")],-1),B=n("ul",null,[n("li",null,"软件本身不支持正则表达式处理，不能做动静分离；而现在许多网站在这方面都有较强的需求，这个是 Nginx、HAProxy+Keepalived 的优势所在。"),n("li",null,"如果是网站应用比较庞大的话，LVS/DR+Keepalived 实施起来就比较复杂了，相对而言，Nginx/HAProxy+Keepalived就简单多了。")],-1),Q=n("h1",{id:"nginx",tabindex:"-1"},[l("Nginx "),n("a",{class:"header-anchor",href:"#nginx","aria-hidden":"true"},"#")],-1),Z=n("p",null,"Nginx 是一个强大的 Web 服务器软件，用于处理高并发的 HTTP 请求和作为反向代理服务器做负载均衡。具有高性能、轻量级、内存消耗少，强大的负载均衡能力等优势。",-1),J=n("h2",{id:"_1-nignx-的架构设计",tabindex:"-1"},[l("1 Nignx 的架构设计 "),n("a",{class:"header-anchor",href:"#_1-nignx-的架构设计","aria-hidden":"true"},"#")],-1),q=n("p",null,"相对于传统基于进程或线程的模型（Apache就采用这种模型）在处理并发连接时会为每一个连接建立一个单独的进程或线程，且在网络或者输入/输出操作时阻塞。这将导致内存和 CPU 的大量消耗，因为新起一个单独的进程或线程需要准备新的运行时环境，包括堆和栈内存的分配，以及新的执行上下文，当然，这些也会导致多余的 CPU 开销。",-1),E=n("p",null,"最终，会由于过多的上下文切换而导致服务器性能变差。反过来，Nginx 的架构设计是采用模块化的、基于事件驱动、异步、单线程且非阻塞。 Nginx 大量使用多路复用和事件通知，Nginx 启动以后，会在系统中以 daemon 的方式在后台运行，其中包括一个 master 进程，n(n>=1) 个 worker 进程。所有的进程都是单线程（即只有一个主线程）的，且进程间通信主要使用共享内存的方式。",-1),G=n("p",null,"其中，master 进程用于接收来自外界的信号，并给 worker 进程发送信号，同时监控 worker 进程的工作状态。worker 进程则是外部请求真正的处理者，每个 worker 请求相互独立且平等的竞争来自客户端的请求。请求只能在一个 worker 进程中被处理，且一个 worker 进程只有一个主线程，所以同时只能处理一个请求。（原理同 Netty 很像）",-1),j=n("h2",{id:"_2-nginx-负载均衡",tabindex:"-1"},[l("2 Nginx 负载均衡 "),n("a",{class:"header-anchor",href:"#_2-nginx-负载均衡","aria-hidden":"true"},"#")],-1),z=n("p",null,"Nginx 负载均衡主要是对七层网络通信模型中的第七层应用层上的 http、https 进行支持。",-1),F=n("p",null,"Nginx 是以反向代理的方式进行负载均衡的。反向代理（Reverse Proxy）方式是指以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个服务器。 Nginx 实现负载均衡的分配策略有很多，Nginx 的 upstream 目前支持以下几种方式：",-1),X=n("ul",null,[n("li",null,"轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。"),n("li",null,"weight：指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。"),n("li",null,"ip_hash：每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。"),n("li",null,"fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。"),n("li",null,"url_hash（第三方）：按访问 url 的 hash 结果来分配请求，使每个 url定向到同一个后端服务器，后端服务器为缓存时比较有效。")],-1),Y=n("h2",{id:"_3-nginx-的优点",tabindex:"-1"},[l("3 Nginx 的优点 "),n("a",{class:"header-anchor",href:"#_3-nginx-的优点","aria-hidden":"true"},"#")],-1),nn=n("ul",null,[n("li",null,"跨平台：Nginx 可以在大多数 Unix like OS编译运行，而且也有 Windows 的移植版本"),n("li",null,"配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置"),n("li",null,"非阻塞、高并发连接：官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数"),n("li",null,"事件驱动：通信机制采用 epoll 模型，支持更大的并发连接"),n("li",null,"Master/Worker 结构：一个 master 进程，生成一个或多个 worker 进程"),n("li",null,"内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个 Nginx 进程才消耗150M 内存（15M*10=150M）"),n("li",null,"内置的健康检查功能：如果 Nginx 代理的后端的某台 Web 服务器宕机了，不会影响前端访问"),n("li",null,"节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头"),n("li",null,"稳定性高：用于反向代理，宕机的概率微乎其微")],-1),en=n("h2",{id:"_4-nginx-的缺点",tabindex:"-1"},[l("4 Nginx 的缺点 "),n("a",{class:"header-anchor",href:"#_4-nginx-的缺点","aria-hidden":"true"},"#")],-1),ln=n("ul",null,[n("li",null,"Nginx 仅能支 持http、https 和 Email 协议，这样就在适用范围上面小些，这个是它的缺点。"),n("li",null,"对后端服务器的健康检查，只支持通过端口来检测，不支持通过 url来检测。"),n("li",null,"不支持 Session 的直接保持，但能通过 ip_hash 来解决。")],-1),tn=n("h1",{id:"haproxy",tabindex:"-1"},[l("HAProxy "),n("a",{class:"header-anchor",href:"#haproxy","aria-hidden":"true"},"#")],-1),sn=n("p",null,"HAProxy 支持两种代理模式 TCP（四层）和HTTP（七层），也是支持虚拟主机的。",-1),on=n("p",null,"HAProxy 的优点能够补充 Nginx 的一些缺点，比如支持 Session 的保持，Cookie 的引导；同时支持通过获取指定的 url 来检测后端服务器的状态。",-1),an=n("p",null,"HAProxy 跟 LVS 类似，本身就只是一款负载均衡软件；单纯从效率上来讲 HAProxy 会比 Nginx 有更出色的负载均衡速度，在并发处理上也是优于 Nginx 的。",-1),rn=n("p",null,"HAProxy 支持 TCP 协议的负载均衡转发，可以对 MySQL 读进行负载均衡，对后端的 MySQL 节点进行检测和负载均衡，大家可以用 LVS+Keepalived 对 MySQL 主从做负载均衡。",-1),dn=n("p",null,"HAProxy 负载均衡策略非常多：Round-robin（轮循）、Weight-round-robin（带权轮循）、source（原地址保持）、RI（请求URL）、rdp-cookie（根据cookie）。",-1),_n=n("p",null,"出自：京东运维",-1),hn=n("hr",null,null,-1),un=n("p",null,"[player id='712292593' type='collect' autoplay='true'/]",-1);function cn(i,xn,gn,pn,o,Sn){const a=r;return u(),h(a,{frontmatter:o.frontmatter,data:o.data},{"main-content-md":e(()=>[x,g,p,S,v,L,V,N,P,m,f,y,A,k,b,H,R,T,I,D,w,$,M,C,U,W,K,O,B,Q,Z,J,q,E,G,j,z,F,X,Y,nn,en,ln,tn,sn,on,an,rn,dn,_n,hn,un]),"main-header":e(()=>[t(i.$slots,"main-header")]),"main-header-after":e(()=>[t(i.$slots,"main-header-after")]),"main-nav":e(()=>[t(i.$slots,"main-nav")]),"main-content":e(()=>[t(i.$slots,"main-content")]),"main-content-after":e(()=>[t(i.$slots,"main-content-after")]),"main-nav-before":e(()=>[t(i.$slots,"main-nav-before")]),"main-nav-after":e(()=>[t(i.$slots,"main-nav-after")]),comment:e(()=>[t(i.$slots,"comment")]),footer:e(()=>[t(i.$slots,"footer")]),aside:e(()=>[t(i.$slots,"aside")]),"aside-custom":e(()=>[t(i.$slots,"aside-custom")]),default:e(()=>[t(i.$slots,"default")]),_:3},8,["frontmatter","data"])}const fn=d(c,[["render",cn],["__file","/Users/vlinux/vlinux/blog/valaxy/vlinux.github.io/pages/posts/你真的掌握-LVS、Nginx-及-HAProxy-的工作原理吗？.md"]]);export{mn as __pageData,fn as default};
