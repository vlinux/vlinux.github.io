import{_ as d}from"./ValaxyMain.vue_vue_type_style_index_0_lang.Bv-Ltzoo.js";import"./chunks/@vueuse/motion.BITvz5PP.js";import{e as h,u as b,a as f}from"./chunks/vue-router.ClANm_mH.js";import{aa as g,ap as e,ag as n,af as l,ai as a,P as m,ab as v,a1 as y}from"./framework.GHZxz7jq.js";import"./index.Dp3W9g7b.js";import"./chunks/dayjs.BldX5ftQ.js";import"./chunks/vue-i18n.C7V8WoQZ.js";import"./chunks/pinia.BfAlK2F6.js";import"./chunks/nprogress.BZwbcB2O.js";/* empty css                    */import"./YunComment.vue_vue_type_style_index_0_lang.C3MeNfs5.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.fblE3Fel.js";import"./post.G7lgMgan.js";const _=h("/posts/Kafka运维笔记",async s=>JSON.parse('{"title":"Kafka运维笔记","description":"","frontmatter":{"title":"Kafka运维笔记","categories":"DevOps","tags":["Kafka"],"date":"2022-03-11 11:05:00"},"headers":[],"relativePath":"pages/posts/Kafka运维笔记.md","lastUpdated":null}'),{lazy:(s,t)=>s.name===t.name}),S={__name:"Kafka运维笔记",setup(s,{expose:t}){const{data:i}=_(),u=f(),p=b(),r=Object.assign(p.meta.frontmatter||{},i.value?.frontmatter||{});return u.currentRoute.value.data=i.value,y("valaxy:frontmatter",r),globalThis.$frontmatter=r,t({frontmatter:{title:"Kafka运维笔记",categories:"DevOps",tags:["Kafka"],date:"2022-03-11 11:05:00"}}),(o,c)=>{const k=d;return v(),g(k,{frontmatter:m(r)},{"main-content-md":e(()=>[...c[0]||(c[0]=[l("h1",{id:"消息队列的流派",tabindex:"-1"},[a("消息队列的流派 "),l("a",{class:"header-anchor",href:"#消息队列的流派","aria-label":'Permalink to "消息队列的流派"'},"​")],-1),l("h3",{id:"什么是-mq",tabindex:"-1"},[a("什么是 MQ "),l("a",{class:"header-anchor",href:"#什么是-mq","aria-label":'Permalink to "什么是 MQ"'},"​")],-1),l("blockquote",null,[l("p",null,"Message Queue（MQ），消息队列中间件。很多人都说：MQ 通过将消息的发送和接收分离来实现应用程序的异步和解偶，这个给人的直觉是——MQ 是异步的，用来解耦的，但是这个只是 MQ 的效果而不是目的。MQ 真正的目的是为了通讯，屏蔽底层复杂的通讯协议，定义了一套应用层的、更加简单的通讯协议。一个分布式系统中两个模块之间通讯要么是HTTP，要么是自己开发的（rpc） TCP，但是这两种协议其实都是原始的协议。HTTP 协议很难实现两端通讯——模块 A 可以调用 B，B 也可以主动调用 A，如果要做到这个两端都要背上WebServer，而且还不支持⻓连接（HTTP 2.0 的库根本找不到）。TCP 就更加原始了，粘包、心跳、私有的协议，想一想头皮就发麻。MQ 所要做的就是在这些协议之上构建一个简单的“协议”——生产者/消费者模型。MQ 带给我的“协议”不是具体的通讯协议，而是更高层次通讯模型。它定义了两个对象——发送数据的叫生产者；接收数据的叫消费者， 提供一个SDK 让我们可以定义自己的生产者和消费者实现消息通讯而无视底层通讯协议")],-1),l("h3",{id:"有-broker-的-mq",tabindex:"-1"},[a("有 Broker 的 MQ "),l("a",{class:"header-anchor",href:"#有-broker-的-mq","aria-label":'Permalink to "有 Broker 的 MQ"'},"​")],-1),l("blockquote",null,[l("p",null,"这个流派通常有一台服务器作为 Broker，所有的消息都通过它中转。生产者把消息发送给它就结束自己的任务了，Broker 则把消息主动推送给消费者（或者消费者主动轮询）")],-1),l("h3",{id:"重-topic",tabindex:"-1"},[a("重 Topic "),l("a",{class:"header-anchor",href:"#重-topic","aria-label":'Permalink to "重 Topic"'},"​")],-1),l("blockquote",null,[l("p",null,"kafka、JMS（ActiveMQ）就属于这个流派，生产者会发送 key 和数据到 Broker，由 Broker比较 key 之后决定给哪个消费者。这种模式是我们最常⻅的模式，是我们对 MQ 最多的印象。在这种模式下一个 topic 往往是一个比较大的概念，甚至一个系统中就可能只有一个topic，topic 某种意义上就是 queue，生产者发送 key 相当于说：“hi，把数据放到 key 的队列中”")],-1),l("blockquote",null,[l("p",null,"如上图所示，Broker 定义了三个队列，key1，key2，key3，生产者发送数据的时候会发送key1 和 data，Broker 在推送数据的时候则推送 data（也可能把 key 带上）。")],-1),l("blockquote",null,[l("p",null,"虽然架构一样但是 kafka 的性能要比 jms 的性能不知道高到多少倍，所以基本这种类型的MQ 只有 kafka 一种备选方案。如果你需要一条暴力的数据流（在乎性能而非灵活性）那么kafka 是最好的选择")],-1),l("h3",{id:"轻-topic",tabindex:"-1"},[a("轻 Topic "),l("a",{class:"header-anchor",href:"#轻-topic","aria-label":'Permalink to "轻 Topic"'},"​")],-1),l("blockquote",null,[l("p",null,"这种的代表是 RabbitMQ（或者说是 AMQP）。生产者发送 key 和数据，消费者定义订阅的队列，Broker 收到数据之后会通过一定的逻辑计算出 key 对应的队列，然后把数据交给队列")],-1),l("blockquote",null,[l("p",null,"这种模式下解耦了 key 和 queue，在这种架构中 queue 是非常轻量级的（在 RabbitMQ 中它的上限取决于你的内存），消费者关心的只是自己的 queue；生产者不必关心数据最终给谁只要指定 key 就行了，中间的那层映射在 AMQP 中叫 exchange（交换机）。")],-1),l("p",null,"AMQP 中有四种 exchange",-1),l("ul",null,[l("li",null,"Direct exchange：key 就等于 queue"),l("li",null,"Fanout exchange：无视 key，给所有的 queue 都来一份"),l("li",null,"Topic exchange：key 可以用“宽字符”模糊匹配 queue"),l("li",null,"Headers exchange：无视 key，通过查看消息的头部元数据来决定发给那个"),l("li",null,"queue（AMQP 头部元数据非常丰富而且可以自定义）")],-1),l("p",null,"这种结构的架构给通讯带来了很大的灵活性，我们能想到的通讯方式都可以用这四种exchange 表达出来。如果你需要一个企业数据总线（在乎灵活性）那么 RabbitMQ 绝对的值得一用",-1),l("h3",{id:"无-broker-的-mq",tabindex:"-1"},[a("无 Broker 的 MQ "),l("a",{class:"header-anchor",href:"#无-broker-的-mq","aria-label":'Permalink to "无 Broker 的 MQ"'},"​")],-1),l("blockquote",null,[l("p",null,"无 Broker 的 MQ 的代表是 ZeroMQ。该作者非常睿智，他非常敏锐的意识到——MQ 是更高级的 Socket，它是解决通讯问题的。所以 ZeroMQ 被设计成了一个“库”而不是一个中间件，这种实现也可以达到——没有 Broker 的目的")],-1),l("blockquote",null,[l("p",null,"节点之间通讯的消息都是发送到彼此的队列中，每个节点都既是生产者又是消费者。ZeroMQ做的事情就是封装出一套类似于 Socket 的 API 可以完成发送数据，读取数据")],-1),l("blockquote",null,[l("p",null,"ZeroMQ 其实就是一个跨语言的、重量级的 Actor 模型邮箱库。你可以把自己的程序想象成一个 Actor，ZeroMQ 就是提供邮箱功能的库；ZeroMQ 可以实现同一台机器的 RPC 通讯也可以实现不同机器的 TCP、UDP 通讯，如果你需要一个强大的、灵活、野蛮的通讯能力，别犹豫 ZeroMQ")],-1),l("h1",{id:"一、kafka介绍",tabindex:"-1"},[a("一、Kafka介绍 "),l("a",{class:"header-anchor",href:"#一、kafka介绍","aria-label":'Permalink to "一、Kafka介绍"'},"​")],-1),l("blockquote",null,[l("p",null,"Kafka是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的 （replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理 大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、 Storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等，用scala语言编 写，Linkedin于 2010 年贡献给了Apache基金会并成为顶级开源 项目。")],-1),l("h2",{id:"_1-kafka的使用场景",tabindex:"-1"},[a("1.Kafka的使用场景 "),l("a",{class:"header-anchor",href:"#_1-kafka的使用场景","aria-label":'Permalink to "1.Kafka的使用场景"'},"​")],-1),l("blockquote",null,[l("p",null,"日志收集：一个公司可以用Kafka收集各种服务的log，通过kafka以统一接口服务的方式 开放给各种consumer，例如hadoop、Hbase、Solr等。 消息系统：解耦和生产者和消费者、缓存消息等。 用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网⻚、 搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过 订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖 掘。 运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产 各种操作的集中反馈，比如报警和报告。")],-1),l("h2",{id:"_2-kafka基本概念",tabindex:"-1"},[a("2.Kafka基本概念 "),l("a",{class:"header-anchor",href:"#_2-kafka基本概念","aria-label":'Permalink to "2.Kafka基本概念"'},"​")],-1),l("blockquote",null,[l("p",null,[a("kafka是一个分布式的，分区的消息(官方称之为commit log)服务。它提供一个消息系统应该 具备的功能，但是确有着独特的设计。可以这样来说，Kafka借鉴了JMS规范的思想，但是确 并 "),l("code",null,"没有完全遵循JMS规范。")])],-1),l("p",null,"首先，让我们来看一下基础的消息(Message)相关术语：",-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"名称"),l("th",null,"解释")])]),l("tbody",null,[l("tr",null,[l("td",null,"Broker"),l("td",null,"消息中间件处理节点，⼀个Kafka节点就是⼀个broker，⼀个或者多个Broker可以组成⼀个Kafka集群")]),l("tr",null,[l("td",null,"Topic"),l("td",null,"Kafka根据topic对消息进⾏归类，发布到Kafka集群的每条消息都需要指定⼀个topic")]),l("tr",null,[l("td",null,"Producer"),l("td",null,"消息⽣产者，向Broker发送消息的客户端")]),l("tr",null,[l("td",null,"Consumer"),l("td",null,"消息消费者，从Broker读取消息的客户端")]),l("tr",null,[l("td",null,"ConsumerGroup"),l("td",null,"每个Consumer属于⼀个特定的Consumer Group，⼀条消息可以被多个不同的Consumer Group消费，但是⼀个Consumer Group中只能有⼀个Consumer能够消费该消息")]),l("tr",null,[l("td",null,"Partition"),l("td",null,"物理上的概念，⼀个topic可以分为多个partition，每个partition内部消息是有序的")])])],-1),l("p",null,[a("因此，从一个较高的层面上来看，producer通过网络发送消息到Kafka集群，然后consumer 来进行消费，如下图： "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110112502.png#mirages-width=1224&mirages-height=578&mirages-cdn-type=5",alt:"输入图片说明"})],-1),l("p",null,[a("服务端(brokers)和客户端(producer、consumer)之间通信通过 "),l("strong",null,"TCP协议"),a(" 来完成。")],-1),l("h1",{id:"二、kafka基本使用",tabindex:"-1"},[a("二、kafka基本使用 "),l("a",{class:"header-anchor",href:"#二、kafka基本使用","aria-label":'Permalink to "二、kafka基本使用"'},"​")],-1),l("h2",{id:"_1-安装前的环境准备",tabindex:"-1"},[a("1.安装前的环境准备 "),l("a",{class:"header-anchor",href:"#_1-安装前的环境准备","aria-label":'Permalink to "1.安装前的环境准备"'},"​")],-1),l("ul",null,[l("li",null,[l("p",null,"安装jdk")]),l("li",null,[l("p",null,"安装zk")]),l("li",null,[l("p",null,[a("官网下载kafka的压缩包:"),l("a",{href:"http://kafka.apache.org/downloads",target:"_blank",rel:"noreferrer"},"http://kafka.apache.org/downloads")])]),l("li",null,[l("p",null,"解压缩至如下路径"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"/usr/local/kafka/")])])]),l("button",{class:"code-block-unfold-btn"})])]),l("li",null,[l("p",null,"修改配置文件：/usr/local/kafka/kafka2.11-2.4/config/server.properties"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"#broker.id属性在kafka集群中必须要是唯一broker.id= 0#kafka部署的机器ip和提供服务的端口号listeners=PLAINTEXT://192.168.65.60:9092#kafka的消息存储文件log.dir=/usr/local/data/kafka-logs#kafka连接zookeeper的地址zookeeper.connect= 192.168.65.60:2181")])])]),l("button",{class:"code-block-unfold-btn"})]),l("h2",{id:"_2-启动kafka服务器",tabindex:"-1"},[a("2.启动kafka服务器 "),l("a",{class:"header-anchor",href:"#_2-启动kafka服务器","aria-label":'Permalink to "2.启动kafka服务器"'},"​")])])],-1),l("p",null,"进入到bin目录下。使用命令来启动",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-server-start.sh -daemon../config/server.properties")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"验证是否启动成功：",-1),l("p",null,"进入到zk中的节点看id是 0 的broker有没有存在（上线）",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"ls /brokers/ids/")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[l("strong",null,"server.properties核心配置详解：")],-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Property"),l("th",null,"Default"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,"broker.id"),l("td",null,"0"),l("td",null,"每个broker都可以⽤⼀个唯⼀的⾮负整数id进⾏标识；这个id可以作为broker的“名字”，你可以选择任意你喜欢的数字作为id，只要id是唯⼀的即可。")]),l("tr",null,[l("td",null,"log.dirs"),l("td",null,"/tmp/kafka-logs"),l("td",null,"kafka存放数据的路径。这个路径并不是唯⼀的，可以是多个，路径之间只需要使⽤逗号分隔即可；每当创建新partition时，都会选择在包含最少partitions的路径下进⾏。")]),l("tr",null,[l("td",null,"listeners"),l("td",null,"PLAINTEXT://192.168.65.60:9092"),l("td",null,"server接受客户端连接的端⼝，ip配置kafka本机ip即可")]),l("tr",null,[l("td",null,"zookeeper.connect"),l("td",null,"localhost:2181"),l("td",null,"zooKeeper连接字符串的格式为：hostname:port，此处hostname和port分别是ZooKeeper集群中某个节点的host和port；zookeeper如果是集群，连接⽅式为hostname1:port1, hostname2:port2,hostname3:port3")]),l("tr",null,[l("td",null,"log.retention.hours"),l("td",null,"168"),l("td",null,"每个⽇志⽂件删除之前保存的时间。默认数据保存时间对所有topic都⼀样。")]),l("tr",null,[l("td",null,"num.partitions"),l("td",null,"1"),l("td",null,"创建topic的默认分区数")]),l("tr",null,[l("td",null,"default.replication.factor"),l("td",null,"1"),l("td",null,"⾃动创建topic的默认副本数量，建议设置为⼤于等于2")]),l("tr",null,[l("td",null,"min.insync.replicas"),l("td",null,"1"),l("td",null,"当producer设置acks为-1时，min.insync.replicas指定replicas的最⼩数⽬（必须确认每⼀个repica的写数据都是成功的），如果这个数⽬没有达到，producer发送消息会产⽣异常")]),l("tr",null,[l("td",null,"delete.topic.enable"),l("td",null,"false"),l("td",null,"是否允许删除主题")])])],-1),l("h2",{id:"_3-创建主题topic",tabindex:"-1"},[a("3.创建主题topic "),l("a",{class:"header-anchor",href:"#_3-创建主题topic","aria-label":'Permalink to "3.创建主题topic"'},"​")],-1),l("blockquote",null,[l("p",null,"topic是什么概念？topic可以实现消息的分类，不同消费者订阅不同的topic。")],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110122844.png",alt:"输入图片说明",loading:"lazy",decoding:"async"})],-1),l("p",null,"执行以下命令创建名为“test”的topic，这个topic只有一个partition，并且备份因子也设置为1",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-topics.sh --create --zookeeper 172.16.253.35:2181 --replication-factor 1 --partitions 1 --topic test")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"查看当前kafka内有哪些topic",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-topics.sh --list --zookeeper 172.16.253.35:2181")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h2",{id:"_4-发送消息",tabindex:"-1"},[a("4.发送消息 "),l("a",{class:"header-anchor",href:"#_4-发送消息","aria-label":'Permalink to "4.发送消息"'},"​")],-1),l("blockquote",null,[l("p",null,"kafka自带了一个producer命令客户端，可以从本地文件中读取内容，或者我们也可以以命令行中直接输入内容，并将这些内容以消息的形式发送到kafka集群中。在默认情况下，每一个行会被当做成一个独立的消息。使用kafka的发送消息的客户端，指定发送到的kafka服务器地址和topic")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-producer.sh --broker-list 172.16.253.38:9092 --topic test")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h2",{id:"_5-消费消息",tabindex:"-1"},[a("[5.消费消息 "),l("a",{class:"header-anchor",href:"#_5-消费消息","aria-label":'Permalink to "[5.消费消息"'},"​")],-1),l("p",null,[a("对于consumer，kafka同样也携带了一个命令行客户端，会将获取到内容在命令中进行输 出， "),l("strong",null,"默认是消费最新的消息"),a(" 。使用kafka的消费者消息的客户端，从指定kafka服务器的指定 topic中消费消息")],-1),l("p",null,"方式一：从最后一条消息的偏移量+1开始消费",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-consumer.sh --bootstrap-server 172.16.253.38:9092 --topic test")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"方式二：从头开始消费",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-consumer.sh --bootstrap-server 172.16.253.38:9092 --from-beginning --topic test")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h3",{id:"几个注意点",tabindex:"-1"},[a("几个注意点： "),l("a",{class:"header-anchor",href:"#几个注意点","aria-label":'Permalink to "几个注意点："'},"​")],-1),l("ul",null,[l("li",null,"消息会被存储"),l("li",null,"消息是顺序存储"),l("li",null,"消息是有偏移量的"),l("li",null,"消费时可以指明偏移量进行消费")],-1),l("h1",{id:"三、kafka中的关键细节",tabindex:"-1"},[a("三、Kafka中的关键细节 "),l("a",{class:"header-anchor",href:"#三、kafka中的关键细节","aria-label":'Permalink to "三、Kafka中的关键细节"'},"​")],-1),l("h2",{id:"_1-消息的顺序存储",tabindex:"-1"},[a("1.消息的顺序存储 "),l("a",{class:"header-anchor",href:"#_1-消息的顺序存储","aria-label":'Permalink to "1.消息的顺序存储"'},"​")],-1),l("blockquote",null,[l("p",null,"消息的发送方会把消息发送到broker中，broker会存储消息，消息是按照发送的顺序进行存储。因此消费者在消费消息时可以指明主题中消息的偏移量。默认情况下，是从最后一个消息的下一个偏移量开始消费。")],-1),l("h2",{id:"_2-单播消息的实现",tabindex:"-1"},[a("[2. 单播消息的实现 "),l("a",{class:"header-anchor",href:"#_2-单播消息的实现","aria-label":'Permalink to "[2. 单播消息的实现"'},"​")],-1),l("blockquote",null,[l("p",null,"单播消息：一个消费组里 只会有一个消费者能消费到某一个topic中的消息。于是可以创建多个消费者，这些消费者在同一个消费组中。")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-consumer.sh --bootstrap-server 10.31.167.10:9092 --consumer-property group.id=testGroup --topic test")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h2",{id:"_3-多播消息的实现",tabindex:"-1"},[a("3.多播消息的实现 "),l("a",{class:"header-anchor",href:"#_3-多播消息的实现","aria-label":'Permalink to "3.多播消息的实现"'},"​")],-1),l("h3",{id:"在一些业务场景中需要让一条消息被多个消费者消费-那么就可以使用多播模式。",tabindex:"-1"},[a("在一些业务场景中需要让一条消息被多个消费者消费，那么就可以使用多播模式。 "),l("a",{class:"header-anchor",href:"#在一些业务场景中需要让一条消息被多个消费者消费-那么就可以使用多播模式。","aria-label":'Permalink to "在一些业务场景中需要让一条消息被多个消费者消费，那么就可以使用多播模式。"'},"​")],-1),l("p",null,"kafka实现多播，只需要让不同的消费者处于不同的消费组即可。",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-consumer.sh --bootstrap-server 10.31.167.10:9092 --consumer-property group.id=testGroup1 --topic test./kafka-console-consumer.sh --bootstrap-server 10.31.167.10:9092 --consumer-property group.id=testGroup2 --topic test")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h2",{id:"_4-查看消费组及信息",tabindex:"-1"},[a("4.查看消费组及信息 "),l("a",{class:"header-anchor",href:"#_4-查看消费组及信息","aria-label":'Permalink to "4.查看消费组及信息"'},"​")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"# 查看当前主题下有哪些消费组./kafka-consumer-groups.sh --bootstrap-server 10.31.167.10:9092 --list# 查看消费组中的具体信息：比如当前偏移量、最后一条消息的偏移量、堆积的消息数量./kafka-consumer-groups.sh --bootstrap-server 172.16.253.38:9092 --describe --group testGroup")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110125233.png",alt:"输入图片说明",loading:"lazy",decoding:"async"})],-1),l("ul",null,[l("li",null,"Currennt-offset: 当前消费组的已消费偏移量"),l("li",null,"Log-end-offset: 主题对应分区消息的结束偏移量(HW)"),l("li",null,"Lag: 当前消费组未消费的消息数")],-1),l("h1",{id:"四、主题、分区的概念",tabindex:"-1"},[a("四、主题、分区的概念 "),l("a",{class:"header-anchor",href:"#四、主题、分区的概念","aria-label":'Permalink to "四、主题、分区的概念"'},"​")],-1),l("h2",{id:"_1-主题topic",tabindex:"-1"},[a("1.主题Topic "),l("a",{class:"header-anchor",href:"#_1-主题topic","aria-label":'Permalink to "1.主题Topic"'},"​")],-1),l("p",null,"主题Topic可以理解成是一个类别的名称。",-1),l("h2",{id:"_2-partition分区",tabindex:"-1"},[a("2.partition分区 "),l("a",{class:"header-anchor",href:"#_2-partition分区","aria-label":'Permalink to "2.partition分区"'},"​")],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110125413.png",alt:"输入图片说明",loading:"lazy",decoding:"async"})],-1),l("blockquote",null,[l("p",null,"一个主题中的消息量是非常大的，因此可以通过分区的设置，来分布式存储这些消息。比如一个topic创建了 3 个分区。那么topic中的消息就会分别存放在这三个分区中。")],-1),l("h3",{id:"为一个主题创建多个分区",tabindex:"-1"},[a("为一个主题创建多个分区 "),l("a",{class:"header-anchor",href:"#为一个主题创建多个分区","aria-label":'Permalink to "为一个主题创建多个分区"'},"​")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 2 --topic test1")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[l("strong",null,"可以通过这样的命令查看topic的分区信息")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test1")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h3",{id:"分区的作用",tabindex:"-1"},[a("分区的作用： "),l("a",{class:"header-anchor",href:"#分区的作用","aria-label":'Permalink to "分区的作用："'},"​")],-1),l("ul",null,[l("li",null,"可以分布式存储"),l("li",null,"可以并行写")],-1),l("p",null,"实际上是存在data/kafka-logs/test-0 和 test-1中的0000000.log文件中",-1),l("p",null,"小细节：",-1),l("blockquote",null,[l("p",null,"定期将自己消费分区的offset提交给kafka内部topic：__consumer_offsets，提交过去的 时候，key是consumerGroupId+topic+分区号，value就是当前offset的值，kafka会定 期清理topic里的消息，最后就保留最新的那条数据 因为__consumer_offsets可能会接收高并发的请求，kafka默认给其分配 50 个分区(可以 通过offsets.topic.num.partitions设置)，这样可以通过加机器的方式抗大并发。 通过如下公式可以选出consumer消费的offset要提交到__consumer_offsets的哪个分区 公式：hash(consumerGroupId) % __consumer_offsets主题的分区数")],-1),l("h1",{id:"五、kafka集群及副本的概念",tabindex:"-1"},[a("五、Kafka集群及副本的概念 "),l("a",{class:"header-anchor",href:"#五、kafka集群及副本的概念","aria-label":'Permalink to "五、Kafka集群及副本的概念"'},"​")],-1),l("h2",{id:"_1-搭建kafka集群-3-个broker",tabindex:"-1"},[a("1.搭建kafka集群， 3 个broker "),l("a",{class:"header-anchor",href:"#_1-搭建kafka集群-3-个broker","aria-label":'Permalink to "1.搭建kafka集群， 3 个broker"'},"​")],-1),l("p",null,"准备 3 个server.properties文件",-1),l("p",null,"每个文件中的这些内容要调整",-1),l("ul",null,[l("li",null,[l("p",null,"server.properties"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"broker.id= 0listeners=PLAINTEXT://192.168.65.60:log.dir=/usr/local/data/kafka-logs")])])]),l("button",{class:"code-block-unfold-btn"})])]),l("li",null,[l("p",null,"server1.properties"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"broker.id= 1listeners=PLAINTEXT://192.168.65.60:log.dir=/usr/local/data/kafka-logs-")])])]),l("button",{class:"code-block-unfold-btn"})])]),l("li",null,[l("p",null,"server2.properties"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"broker.id= 2listeners=PLAINTEXT://192.168.65.60:log.dir=/usr/local/data/kafka-logs-")])])]),l("button",{class:"code-block-unfold-btn"})]),l("h3",{id:"使用如下命令来启动-3-台服务器",tabindex:"-1"},[a("使用如下命令来启动 3 台服务器 "),l("a",{class:"header-anchor",href:"#使用如下命令来启动-3-台服务器","aria-label":'Permalink to "使用如下命令来启动 3 台服务器"'},"​")])])],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-server-start.sh -daemon../config/server0.properties./kafka-server-start.sh -daemon../config/server1.properties./kafka-server-start.sh -daemon../config/server2.properties")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"搭建完后通过查看zk中的/brokers/ids 看是否启动成功",-1),l("h2",{id:"_2-副本的概念",tabindex:"-1"},[a("2.副本的概念 "),l("a",{class:"header-anchor",href:"#_2-副本的概念","aria-label":'Permalink to "2.副本的概念"'},"​")],-1),l("blockquote",null,[l("p",null,"副本是对分区的备份。在集群中，不同的副本会被部署在不同的broker上。下面例子：创建 1个主题， 2 个分区、 3 个副本。")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-topics.sh --create --zookeeper 172.16.253.35:2181 --replication-factor 3 --partitions 2 --topic my-replicated-topic")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110133849.png",alt:"输入图片说明",loading:"lazy",decoding:"async"})],-1),l("p",null,"通过查看主题信息，其中的关键数据：",-1),l("ul",null,[l("li",null,"replicas：当前副本存在的broker节点"),l("li",null,[a("leader：副本里的概念 "),l("ul",null,[l("li",null,"每个partition都有一个broker作为leader。"),l("li",null,"消息发送方要把消息发给哪个broker？就看副本的leader是在哪个broker上面。副本里的leader专⻔用来接收消息。"),l("li",null,"接收到消息，其他follower通过poll的方式来同步数据。")])]),l("li",null,"follower：leader处理所有针对这个partition的读写请求，而follower被动复制leader，不提供读写（主要是为了保证多副本数据与消费的一致性），如果leader所在的broker挂掉，那么就会进行新leader的选举，至于怎么选，在之后的controller的概念中介绍。")],-1),l("p",null,"通过kill掉leader后再查看主题情况",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"# kill掉leaderps -aux | grep server.propertieskill 17631# 查看topic情况./kafka-topics.sh --describe --zookeeper 172.16.253.35:2181 --topic my-replicated-topic")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"isr： 可以同步的broker节点和已同步的broker节点，存放在isr集合中。",-1),l("h2",{id:"_3-broker、主题、分区、副本",tabindex:"-1"},[a("3.broker、主题、分区、副本 "),l("a",{class:"header-anchor",href:"#_3-broker、主题、分区、副本","aria-label":'Permalink to "3.broker、主题、分区、副本"'},"​")],-1),l("ul",null,[l("li",null,"kafka集群中由多个broker组成"),l("li",null,"一个broker中存放一个topic的不同partition——副本")],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110134554.png",alt:"输入图片说明",loading:"lazy",decoding:"async"})],-1),l("h2",{id:"_4-kafka集群消息的发送",tabindex:"-1"},[a("4.kafka集群消息的发送 "),l("a",{class:"header-anchor",href:"#_4-kafka集群消息的发送","aria-label":'Permalink to "4.kafka集群消息的发送"'},"​")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-producer.sh --broker-list 172.16.253.38:9092,172.16.253.38:9093,172.16.253.38:9094 --topic my-replicated-topic")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h2",{id:"_5-kafka集群消息的消费",tabindex:"-1"},[a("5.kafka集群消息的消费 "),l("a",{class:"header-anchor",href:"#_5-kafka集群消息的消费","aria-label":'Permalink to "5.kafka集群消息的消费"'},"​")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./kafka-console-consumer.sh --bootstrap-server 172.16.253.38:9092,172.16.253.38:9093,172.16.253.38:9094 --from-beginning --topic my-replicated-topic")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h2",{id:"_6-关于分区消费组消费者的细节",tabindex:"-1"},[a("6.关于分区消费组消费者的细节 "),l("a",{class:"header-anchor",href:"#_6-关于分区消费组消费者的细节","aria-label":'Permalink to "6.关于分区消费组消费者的细节"'},"​")],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/images/QQ%E6%88%AA%E5%9B%BE20220110134734.png",alt:"输入图片说明",loading:"lazy",decoding:"async"})],-1),l("blockquote",null,[l("p",null,"图中Kafka集群有两个broker，每个broker中有多个partition。一个partition只能被一个消费组里的某一个消费者消费，从而保证消费顺序。Kafka只在partition的范围内保证消息消费的局部顺序性，不能在同一个topic中的多个partition中保证总的消费顺序性。一个消费者可以消费多个partition。")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"消费组中消费者的数量不能比一个topic中的partition数量多，否则多出来的消费者消费不到消息。")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h1",{id:"六、kafka集群controller、rebalance和hw",tabindex:"-1"},[a("六、Kafka集群Controller、Rebalance和HW "),l("a",{class:"header-anchor",href:"#六、kafka集群controller、rebalance和hw","aria-label":'Permalink to "六、Kafka集群Controller、Rebalance和HW"'},"​")],-1),l("h1",{id:"",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#","aria-label":'Permalink to ""'},"​")],-1),l("h2",{id:"_1-controller",tabindex:"-1"},[a("1.Controller "),l("a",{class:"header-anchor",href:"#_1-controller","aria-label":'Permalink to "1.Controller"'},"​")],-1),l("ul",null,[l("li",null,[a("Kafka集群中的broker在zk中创建临时序号节点，序号最小的节点（最先创建的节点）将作为集群的controller，负责管理整个集群中的所有分区和副本的状态： "),l("ul",null,[l("li",null,"当某个分区的leader副本出现故障时，由控制器负责为该分区选举新的leader副本。"),l("li",null,"当检测到某个分区的ISR集合发生变化时，由控制器负责通知所有broker更新其元数据信息。"),l("li",null,"当使用kafka-topics.sh脚本为某个topic增加分区数量时，同样还是由控制器负责让新分区被其他节点感知到。")])])],-1),l("h2",{id:"_2-rebalance机制",tabindex:"-1"},[a("2.Rebalance机制 "),l("a",{class:"header-anchor",href:"#_2-rebalance机制","aria-label":'Permalink to "2.Rebalance机制"'},"​")],-1),l("p",null,"前提是：消费者没有指明分区消费。当消费组里消费者和分区的关系发生变化，那么就会触发rebalance机制。",-1),l("p",null,"这个机制会重新调整消费者消费哪个分区。",-1),l("p",null,"在触发rebalance机制之前，消费者消费哪个分区有三种策略：",-1),l("ul",null,[l("li",null,"range：通过公示来计算某个消费者消费哪个分区"),l("li",null,"轮询：大家轮着消费"),l("li",null,"sticky：在触发了rebalance后，在消费者消费的原分区不变的基础上进行调整。")],-1),l("h2",{id:"_3-hw和leo",tabindex:"-1"},[a("3.HW和LEO "),l("a",{class:"header-anchor",href:"#_3-hw和leo","aria-label":'Permalink to "3.HW和LEO"'},"​")],-1),l("blockquote",null,[l("p",null,"HW俗称高水位，HighWatermark的缩写，取一个partition对应的ISR中最小的LEO(log-end-offset)作为HW，consumer最多只能消费到HW所在的位置。另外每个replica都有HW,leader和follower各自负责更新自己的HW的状态。对于leader新写入的消息，consumer不能立刻消费，leader会等待该消息被所有ISR中的replicas同步后更新HW，此时消息才能被consumer消费。这样就保证了如果leader所在的broker失效，该消息仍然可以从新选举的leader中获取。")],-1),l("h1",{id:"七、kafka线上问题优化",tabindex:"-1"},[a("七、Kafka线上问题优化 "),l("a",{class:"header-anchor",href:"#七、kafka线上问题优化","aria-label":'Permalink to "七、Kafka线上问题优化"'},"​")],-1),l("h2",{id:"_1-如何防止消息丢失",tabindex:"-1"},[a("1.如何防止消息丢失 "),l("a",{class:"header-anchor",href:"#_1-如何防止消息丢失","aria-label":'Permalink to "1.如何防止消息丢失"'},"​")],-1),l("ul",null,[l("li",null,"发送方： ack是 1 或者-1/all 可以防止消息丢失，如果要做到99.9999%，ack设成all，把min.insync.replicas配置成分区备份数"),l("li",null,"消费方：把自动提交改为手动提交。")],-1),l("h2",{id:"_2-如何防止消息的重复消费",tabindex:"-1"},[a("2.如何防止消息的重复消费 "),l("a",{class:"header-anchor",href:"#_2-如何防止消息的重复消费","aria-label":'Permalink to "2.如何防止消息的重复消费"'},"​")],-1),l("blockquote",null,[l("p",null,"一条消息被消费者消费多次。如果为了消息的不重复消费，而把生产端的重试机制关闭、消费端的手动提交改成自动提交，这样反而会出现消息丢失，那么可以直接在防治消息丢失的手段上再加上消费消息时的幂等性保证，就能解决消息的重复消费问题。")],-1),l("h3",{id:"幂等性如何保证",tabindex:"-1"},[a("幂等性如何保证： "),l("a",{class:"header-anchor",href:"#幂等性如何保证","aria-label":'Permalink to "幂等性如何保证："'},"​")],-1),l("ul",null,[l("li",null,"mysql 插入业务id作为主键，主键是唯一的，所以一次只能插入一条"),l("li",null,"使用redis或zk的分布式锁（主流的方案）")],-1),l("h2",{id:"_3-如何做到顺序消费rocketmq",tabindex:"-1"},[a("3.如何做到顺序消费RocketMQ "),l("a",{class:"header-anchor",href:"#_3-如何做到顺序消费rocketmq","aria-label":'Permalink to "3.如何做到顺序消费RocketMQ"'},"​")],-1),l("ul",null,[l("li",null,"发送方：在发送时将ack不能设置 0 ，关闭重试，使用同步发送，等到发送成功再发送下一条。确保消息是顺序发送的。"),l("li",null,"接收方：消息是发送到一个分区中，只能有一个消费组的消费者来接收消息。因此，kafka的顺序消费会牺牲掉性能。")],-1),l("h2",{id:"_4-解决消息积压问题",tabindex:"-1"},[a("4.解决消息积压问题 "),l("a",{class:"header-anchor",href:"#_4-解决消息积压问题","aria-label":'Permalink to "4.解决消息积压问题"'},"​")],-1),l("blockquote",null,[l("p",null,"消息积压会导致很多问题，比如磁盘被打满、生产端发消息导致kafka性能过慢，就容易出现服务雪崩，就需要有相应的手段：")],-1),l("ul",null,[l("li",null,"方案一：在一个消费者中启动多个线程，让多个线程同时消费。——提升一个消费者的消费能力（增加分区增加消费者）。"),l("li",null,"方案二：如果方案一还不够的话，这个时候可以启动多个消费者，多个消费者部署在不同的服务器上。其实多个消费者部署在同一服务器上也可以提高消费能力——充分利用服务器的cpu资源。"),l("li",null,"方案三：让一个消费者去把收到的消息往另外一个topic上发，另一个topic设置多个分区和多个消费者 ，进行具体的业务消费。")],-1),l("h2",{id:"_5-延迟队列",tabindex:"-1"},[a("5.延迟队列 "),l("a",{class:"header-anchor",href:"#_5-延迟队列","aria-label":'Permalink to "5.延迟队列"'},"​")],-1),l("p",null,"延迟队列的应用场景：在订单创建成功后如果超过 30 分钟没有付款，则需要取消订单，此时可用延时队列来实现",-1),l("ul",null,[l("li",null,[a("创建多个topic，每个topic表示延时的间隔 "),l("ul",null,[l("li",null,"topic_5s: 延时5s执行的队列"),l("li",null,"topic_1m: 延时 1 分钟执行的队列"),l("li",null,"topic_30m: 延时 30 分钟执行的队列")])]),l("li",null,"消息发送者发送消息到相应的topic，并带上消息的发送时间"),l("li",null,[a("消费者订阅相应的topic，消费时轮询消费整个topic中的消息 "),l("ul",null,[l("li",null,"如果消息的发送时间，和消费的当前时间超过预设的值，比如 30 分钟"),l("li",null,"如果消息的发送时间，和消费的当前时间没有超过预设的值，则不消费当前的offset及之后的offset的所有消息都消费"),l("li",null,"下次继续消费该offset处的消息，判断时间是否已满足预设值")])])],-1),l("h1",{id:"八、kafka-eagle监控平台",tabindex:"-1"},[a("八、Kafka-eagle监控平台 "),l("a",{class:"header-anchor",href:"#八、kafka-eagle监控平台","aria-label":'Permalink to "八、Kafka-eagle监控平台"'},"​")],-1),l("h2",{id:"安装kafka-eagle",tabindex:"-1"},[a("安装Kafka-eagle "),l("a",{class:"header-anchor",href:"#安装kafka-eagle","aria-label":'Permalink to "安装Kafka-eagle"'},"​")],-1),l("p",null,[l("a",{href:"http://www.kafka-eagle.org/",target:"_blank",rel:"noreferrer"},"http://www.kafka-eagle.org/")],-1),l("ul",null,[l("li",null,"安装jdk"),l("li",null,"解压缩后修改配置文件 system-config.properties")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"# 配置zk  去掉cluster2efak.zk.cluster.alias=cluster1cluster1.zk.list=172.16.253.35:2181# cluster2.zk.list=xdn10:2181,xdn11:2181,xdn12:2181# 配置mysqlkafka.eagle.driver=com.mysql.cj.jdbc.Driverkafka.eagle.url=jdbc:mysql://172.16.253.22:3306/ke?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNullkafka.eagle.username=rootkafka.eagle.password= 123456")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("ul",null,[l("li",null,[l("p",null,"修改/etc/profile"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"export  JAVA_HOME=/usr/local/jdk/jdk1.8.0_191CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jarexport KE_HOME=/home/aisys/efak-web-2.0.9export PATH=$PATH:$KE_HOME/bin:$JAVA_HOME/bin")])])]),l("button",{class:"code-block-unfold-btn"})])]),l("li",null,[l("p",null,"刷新配置"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"source /etc/profile")])])]),l("button",{class:"code-block-unfold-btn"})])]),l("li",null,[l("p",null,"进入到bin目录，为ke.sh增加可执行的权限")])],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"chmod +x ke.sh")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("ul",null,[l("li",null,[l("p",null,"启动kafka-eagle"),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"./ke.sh start")])])]),l("button",{class:"code-block-unfold-btn"})])])],-1)])]),"main-header":e(()=>[n(o.$slots,"main-header")]),"main-header-after":e(()=>[n(o.$slots,"main-header-after")]),"main-nav":e(()=>[n(o.$slots,"main-nav")]),"main-content-before":e(()=>[n(o.$slots,"main-content-before")]),"main-content":e(()=>[n(o.$slots,"main-content")]),"main-content-after":e(()=>[n(o.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(o.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(o.$slots,"main-nav-after")]),comment:e(()=>[n(o.$slots,"comment")]),footer:e(()=>[n(o.$slots,"footer")]),aside:e(()=>[n(o.$slots,"aside")]),"aside-custom":e(()=>[n(o.$slots,"aside-custom")]),default:e(()=>[n(o.$slots,"default")]),_:3},8,["frontmatter"])}}};export{S as default,_ as usePageData};
