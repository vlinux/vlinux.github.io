import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang-01eb07f5.js";import{_ as u,c as d,w as s,o as g,b as n,U as l,q as o,r as a,W as h,p as _}from"./app-84496ba8.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-8e866644.js";import"./YunCard.vue_vue_type_style_index_0_lang-1adf57e7.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-3f7b80af.js";const yl=JSON.parse('{"title":"Consul+Registrator+Nginx实现容器服务自动发现","description":"","frontmatter":{"title":"Consul+Registrator+Nginx实现容器服务自动发现","categories":"微服务","tags":["Consul+Registrator+Nginx","微服务"],"date":"2019-01-01T15:34:00.000Z"},"headers":[{"level":2,"title":"1.了解consul","slug":"_1-了解consul","link":"#_1-了解consul","children":[{"level":3,"title":"1.1 架构设计","slug":"_1-1-架构设计","link":"#_1-1-架构设计","children":[]},{"level":3,"title":"1.2 架构优势","slug":"_1-2-架构优势","link":"#_1-2-架构优势","children":[]}]},{"level":2,"title":"2.环境说明","slug":"_2-环境说明","link":"#_2-环境说明","children":[]},{"level":2,"title":"3.部署nginx","slug":"_3-部署nginx","link":"#_3-部署nginx","children":[{"level":3,"title":"3.1 安装nginx","slug":"_3-1-安装nginx","link":"#_3-1-安装nginx","children":[]},{"level":3,"title":"3.2 安装consul-template","slug":"_3-2-安装consul-template","link":"#_3-2-安装consul-template","children":[]}]},{"level":2,"title":"4.部署consul","slug":"_4-部署consul","link":"#_4-部署consul","children":[{"level":3,"title":"4.1 安装consul","slug":"_4-1-安装consul","link":"#_4-1-安装consul","children":[]},{"level":3,"title":"4.2 查看consul集群信息","slug":"_4-2-查看consul集群信息","link":"#_4-2-查看consul集群信息","children":[]},{"level":3,"title":"4.3 通过http api获取集群信息","slug":"_4-3-通过http-api获取集群信息","link":"#_4-3-通过http-api获取集群信息","children":[]}]},{"level":2,"title":"5.配置nginx","slug":"_5-配置nginx","link":"#_5-配置nginx","children":[{"level":3,"title":"5.1 创建nginx.ctmpl模板","slug":"_5-1-创建nginx-ctmpl模板","link":"#_5-1-创建nginx-ctmpl模板","children":[]},{"level":3,"title":"5.2 修改nginx.conf","slug":"_5-2-修改nginx-conf","link":"#_5-2-修改nginx-conf","children":[]},{"level":3,"title":"5.3 运行consul-template进程","slug":"_5-3-运行consul-template进程","link":"#_5-3-运行consul-template进程","children":[]}]},{"level":2,"title":"6.部署docker","slug":"_6-部署docker","link":"#_6-部署docker","children":[{"level":3,"title":"6.1 安装docker服务","slug":"_6-1-安装docker服务","link":"#_6-1-安装docker服务","children":[]},{"level":3,"title":"6.2 创建registrator容器","slug":"_6-2-创建registrator容器","link":"#_6-2-创建registrator容器","children":[]}]}],"relativePath":"pages/posts/Consul+Registrator+Nginx实现容器服务自动发现.md","path":"/Users/vlinux/vlinux/blog/valaxy/vlinux.github.io/pages/posts/Consul+Registrator+Nginx实现容器服务自动发现.md","lastUpdated":1675833042000}'),c=JSON.parse('{"title":"Consul+Registrator+Nginx实现容器服务自动发现","description":"","frontmatter":{"title":"Consul+Registrator+Nginx实现容器服务自动发现","categories":"微服务","tags":["Consul+Registrator+Nginx","微服务"],"date":"2019-01-01T15:34:00.000Z"},"headers":[{"level":2,"title":"1.了解consul","slug":"_1-了解consul","link":"#_1-了解consul","children":[{"level":3,"title":"1.1 架构设计","slug":"_1-1-架构设计","link":"#_1-1-架构设计","children":[]},{"level":3,"title":"1.2 架构优势","slug":"_1-2-架构优势","link":"#_1-2-架构优势","children":[]}]},{"level":2,"title":"2.环境说明","slug":"_2-环境说明","link":"#_2-环境说明","children":[]},{"level":2,"title":"3.部署nginx","slug":"_3-部署nginx","link":"#_3-部署nginx","children":[{"level":3,"title":"3.1 安装nginx","slug":"_3-1-安装nginx","link":"#_3-1-安装nginx","children":[]},{"level":3,"title":"3.2 安装consul-template","slug":"_3-2-安装consul-template","link":"#_3-2-安装consul-template","children":[]}]},{"level":2,"title":"4.部署consul","slug":"_4-部署consul","link":"#_4-部署consul","children":[{"level":3,"title":"4.1 安装consul","slug":"_4-1-安装consul","link":"#_4-1-安装consul","children":[]},{"level":3,"title":"4.2 查看consul集群信息","slug":"_4-2-查看consul集群信息","link":"#_4-2-查看consul集群信息","children":[]},{"level":3,"title":"4.3 通过http api获取集群信息","slug":"_4-3-通过http-api获取集群信息","link":"#_4-3-通过http-api获取集群信息","children":[]}]},{"level":2,"title":"5.配置nginx","slug":"_5-配置nginx","link":"#_5-配置nginx","children":[{"level":3,"title":"5.1 创建nginx.ctmpl模板","slug":"_5-1-创建nginx-ctmpl模板","link":"#_5-1-创建nginx-ctmpl模板","children":[]},{"level":3,"title":"5.2 修改nginx.conf","slug":"_5-2-修改nginx-conf","link":"#_5-2-修改nginx-conf","children":[]},{"level":3,"title":"5.3 运行consul-template进程","slug":"_5-3-运行consul-template进程","link":"#_5-3-运行consul-template进程","children":[]}]},{"level":2,"title":"6.部署docker","slug":"_6-部署docker","link":"#_6-部署docker","children":[{"level":3,"title":"6.1 安装docker服务","slug":"_6-1-安装docker服务","link":"#_6-1-安装docker服务","children":[]},{"level":3,"title":"6.2 创建registrator容器","slug":"_6-2-创建registrator容器","link":"#_6-2-创建registrator容器","children":[]}]}],"relativePath":"pages/posts/Consul+Registrator+Nginx实现容器服务自动发现.md","path":"/Users/vlinux/vlinux/blog/valaxy/vlinux.github.io/pages/posts/Consul+Registrator+Nginx实现容器服务自动发现.md","lastUpdated":1675833042000}'),C={name:"pages/posts/Consul+Registrator+Nginx实现容器服务自动发现.md",data(){return{data:c,frontmatter:c.frontmatter}},setup(){_("pageData",c)}},A={id:"基于consul-registrator-nginx实现容器服务自动发现的集群框架",tabindex:"-1"},m=n("blockquote",null,[n("p",null,"我们先来看一下服务发现常用的框架有哪些："),n("ul",null,[n("li",null,"zookeeper"),n("li",null,"eureka"),n("li",null,"etcd"),n("li",null,"consul")])],-1),x=n("p",null,[l("这里就不挨个来介绍它们了，本文中主要以consul为主，如果你在大量接触或使用微服务的话，你可能会碰到一个问题？当你创建的服务数量越来越多时，这些服务之间的通信便越难管理，而且维护代价会越来越高。consul可以给你答案，我们一起来了解一下consul： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/41b1033a119139c1375c52d5300eced9.jpg",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"})],-1),k={id:"_1-了解consul",tabindex:"-1"},f=n("p",null,"Consul是一个分布式，高度可用且支持多数据中心的服务发现，配置和编排工具。 Consul支持大规模部署，配置和维护面向服务的体系结构。 欲了解更多官方信息，请参阅：",-1),y={id:"_1-1-架构设计",tabindex:"-1"},D=n("p",null,"在现实中，我们一直渴望着追求提供高质量、高可用的服务架构体系，同时减少不必要的部署和维护代价，减少容错率。面对如此高的要求，可以有两种架构方案：",-1),v=n("ul",null,[n("li",null,"Docker+Etcd+Confd+Nginx"),n("li",null,"Docker+Consul+Nginx")],-1),b=n("p",null,[l("本文中我们主要来介绍 Docker+Consul+Nginx方案，此方案更加高效、快捷，并且维护代价和容错率更低，分布式支持力度更强，如下图所示： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/de11c5f722122d7f4f64b27c0d56a7a3.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"})],-1),w=n("p",null,"使用Docker将Consul、Consul Template、Registrator和Nginx组装成一个值得信任且可扩展的服务框架，这套架构让你在这个框架中添加和移除服务，不需要重写任何配置，也不需要重启任何服务，一切都能正常运行，工作流程很简单：",-1),N=n("blockquote",null,[n("p",null,"docker节点 ---------> consul ---------> nginx.conf")],-1),R={id:"_1-2-架构优势",tabindex:"-1"},I=n("p",null,"Docker+Consul+Nginx虽然看起来是三个组件的运用，但却证明是一个有机的整体。它们互相联系、互相作用，完全满足我们对高可用、高效服务架构方案的需求，是Docker生态圈中最理想的组合之一，具有以下优势：",-1),$=n("ol",null,[n("li",null,"自动发现与注册组件consul使用 Raft 算法来保证一致性，比复杂的Paxos 算法更直接。相比较而言，zookeeper 采用的是 Paxos，而 etcd 使用的则是 Raft；"),n("li",null,"支持多数据中心，多数据中心集群可以避免单数据中心的单点故障，zookeeper 和 etcd 均不提供多数据中心功能的支持；"),n("li",null,"自动、实时发现及无感知服务刷新，具备资源弹性，伸缩自如；"),n("li",null,"支持健康检查，负载能动态在可用的服务实例上进行均衡，etcd 不提供此功能；"),n("li",null,"支持足够多台Docker容器(前提架构资源足以保证性能支撑)；"),n("li",null,"支持http 和dns 协议接口，zookeeper 的集成较为复杂，etcd 只支持 http 协议；"),n("li",null,"服务规模方便进行快速调整，官方提供web管理界面，etcd 无此功能；"),n("li",null,"Consul template 搭配consul使用，支持多种接入层，如Nginx、Haproxy。")],-1),E={id:"_2-环境说明",tabindex:"-1"},S=n("p",null,"本文所用的环境均按1.1中的架构图来部署，nginx用1台服务器、consul用1台服务器、docker host用2台服务器，共用4台服务器来部署，当然如果你的服务器紧张，用3台也一样，减少1台docker host就行：",-1),z=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"服务器IP"),n("th",null,"服务器名"),n("th",null,"角色")])]),n("tbody",null,[n("tr",null,[n("td",null,"172.18.18.32"),n("td",null,"nginx"),n("td",null,"运行nginx服务、consul-template守护进程")]),n("tr",null,[n("td",null,"172.18.18.33"),n("td",null,"consul"),n("td",null,"运行consul服务")]),n("tr",null,[n("td",null,"172.18.18.34"),n("td",null,"docker01"),n("td",null,"运行registrator容器、运行nginx容器（映射端口81、82）")]),n("tr",null,[n("td",null,"172.18.18.35"),n("td",null,"docker02"),n("td",null,"运行registrator容器、运行nginx容器（映射端口83、84）")])])],-1),P={id:"_3-部署nginx",tabindex:"-1"},O=n("blockquote",null,[n("p",null,"在nginx服务器上操作")],-1),U={id:"_3-1-安装nginx",tabindex:"-1"},V=n("p",null,"1、下载并解压nginx： 你可以用docker的方案运行nginx、也可以用源码包编译安装nginx。在本文中nginx用源码包的方式安装",-1),q=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx /]# cd /usr/src/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx src /]# tar -zxvf nginx-1.12.1.tar.gz")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),T=n("p",null,"2、编译安装nginx：",-1),F=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx src]# yum -y install gcc gcc-c++ make openssl-devel pcre-devel")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx src]# cd nginx-1.12.1/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx nginx-1.12.1]# ./configure --prefix=/usr/local/nginx   --with-http_stub_status_module --with-http_realip_module --with-pcre  --with-http_ssl_module")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx nginx-1.12.1]# make -j 2")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx nginx-1.12.1]# make install")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),j={id:"_3-2-安装consul-template",tabindex:"-1"},B=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx ]# wget https://releases.hashicorp.com/consul-template/0.19.3/consul-template_0.19.3_linux_amd64.zip")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),H=n("p",null,"2、解压并安装到/usr/bin目录",-1),L=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx ]# unzip consul-template_0.19.3_linux_amd64.zip")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx ]# mv consul-template /usr/bin/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),J={id:"_4-部署consul",tabindex:"-1"},Z=n("blockquote",null,[n("p",null,"在consul服务器上操作")],-1),K={id:"_4-1-安装consul",tabindex:"-1"},M=n("p",null,"2、解压、安装",-1),W=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#unzip consul_0.9.2_linux_amd64.zip")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#mv consul /usr/bin/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Y=n("p",null,"3、部署consul",-1),G=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#consul agent -server -bootstrap -ui -data-dir=/var/lib/consul-data -bind=172.18.18.33 -client=0.0.0.0 -node=server01")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Q=n("p",null,"参数说明： agent:运行一个consul代理。 -server :切换代理到服务器模式。 -bootstrap :将服务器设置为引导模式。 -ui:启用内置的静态web UI服务器。 -data-dir:路径到数据目录存储代理状态。 -bind:设置集群通信的绑定地址。 -client:设置用于绑定客户端访问的地址。这包括RPC、DNS、HTTP和HTTPS(如果配置)。 -node:此节点的名称。 在集群中必须是唯一的，如果你运行第2台consul，可以写server02、server03等。",-1),X=n("p",null,"consul启动后它会在前台显示，如果你想让它在后台运行，可以加上nohup &来运行它：",-1),nn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#nohup consul agent -server -bootstrap -ui -data-dir=/var/lib/consul-data -bind=172.18.18.33 -client=0.0.0.0 -node=server01 &")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),ln=n("p",null,[l("4、查看consul启动后的情况： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/cbcdb4563e083359c0beb09e8cd66d3a.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"}),l(" 启动consul后默认会监听5个端口： 8300： replication、leader farwarding的端口 8301： lan cossip的端口 8302： wan gossip的端口 8500： web ui界面的端口 8600： 使用dns协议查看节点信息的端口 可参考下图查看端口的意思： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/30228798a59a97b32f4018de04ec2f40.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"})],-1),sn={id:"_4-2-查看consul集群信息",tabindex:"-1"},en=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#consul members")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#consul info |grep leader")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#consul catalog services")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),on={id:"_4-3-通过http-api获取集群信息",tabindex:"-1"},tn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"# 集群server成员")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#curl 127.0.0.1:8500/v1/status/peers")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"# 集群Raft leader")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#curl 127.0.0.1:8500/v1/status/leader")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"# 注册的所有服务")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#curl 127.0.0.1:8500/v1/catalog/services")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"# 服务信息")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#curl 127.0.0.1:8500/v1/catalog/services/nginx")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"# 集群节点详细信息")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@consul ~]#curl 127.0.0.1:8500/v1/catalog/nodes")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),an=n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/90afa2e429dcac75f0b794cd889763b0.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"},null,-1),cn=n("p",null,[l("我们在来看下NODES，从图中很好理解， 在server01这台节点上有个consul :8300的服务： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/fbd5cf540d3daba111834be03eaebbaa.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"})],-1),rn=n("p",null,"接下来，我们去nginx服务器上配置一下nginx模板，并在两台docker主机上运行registrator服务进行测试。",-1),pn={id:"_5-配置nginx",tabindex:"-1"},un=n("blockquote",null,[n("p",null,"在nginx服务器上操作")],-1),dn=n("p",null,"在步骤3中nginx已经安装好了，这一步只是配置nginx，大概配置的思路为：",-1),gn=n("ul",null,[n("li",null,"在/usr/local/nginx/conf中创建目录consul，目录名自定义；"),n("li",null,"在consul目录中创建nginx.ctmpl模板；"),n("li",null,"在nginx.conf配置中添加include项并指向consul目录 ；"),n("li",null,"重启nginx服务；")],-1),hn={id:"_5-1-创建nginx-ctmpl模板",tabindex:"-1"},_n=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx /]#mkdir /usr/local/nginx/consul/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx /]#cd /usr/local/nginx/consul/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx consul]#vim nginx.ctmpl")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"upstream http_backend {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},'    {{range service "nginx"}}')]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    server {{ .Address }}:{{ .Port }};")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    {{ end }}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"server {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    listen 8000;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    server_name localhost;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    location / {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    proxy_pass http://http_backend;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    }")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Cn=n("p",null,"nginx.ctmpl模板中的内容就是两段意思，熟悉nginx的朋友一看也能明白：第1 定义nginx upstream一个简单模板，第2 定义一个server，监听8000端口，反向代理到upstream。",-1),An={id:"_5-2-修改nginx-conf",tabindex:"-1"},mn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx consul]# vim /usr/local/nginx/conf/nginx.conf")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"worker_processes  1;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"events {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    worker_connections  1024;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"http {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    include       mime.types;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    default_type  application/octet-stream;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    sendfile        on;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    keepalive_timeout  65;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    server {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        listen       80;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        server_name  localhost;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        location / {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"            root   html;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"            index  index.html index.htm;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        }")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        error_page   500 502 503 504  /50x.html;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        location = /50x.html {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"            root   html;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        }")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    }")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"        #添加这一行")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    include /usr/local/nginx/consul/*.conf;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),xn=n("p",null,"添加好了在重载nginx服务：",-1),kn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx consul]# /usr/local/nginx/sbin/nginx  -s reload")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),fn={id:"_5-3-运行consul-template进程",tabindex:"-1"},yn=n("p",null,"1、启动consul-template",-1),Dn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},'[root@nginx consul]#consul-template --consul-addr 172.18.18.33:8500 --template "./nginx.ctmpl:vhost.conf" --log-level=info')]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"2018/03/14 08:08:06.933447 [INFO] consul-template v0.19.3 (ebf2d3d)")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"2018/03/14 08:08:06.933459 [INFO] (runner) creating new runner (dry: false, once: false)")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"2018/03/14 08:08:06.933779 [INFO] (runner) creating watcher")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"2018/03/14 08:08:06.933858 [INFO] (runner) starting")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"2018/03/14 08:08:06.933873 [INFO] (runner) initiating run")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"2018/03/14 08:08:06.935387 [INFO] (runner) initiating run")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"注意：它这个日志是一直在前台输出，通过ctrl+c停止consul-template进程。")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),vn=n("p",null,"参数说明： --consul-addr：指定consul服务的ip和端口； ./nginx.ctmpl：这是用nginx.ctmpl这个模板来启动进程，这是写的相对路径，也可以写绝对路径； vhost.conf：nginx.ctmpl模板生成后的文件名，这也可以写绝对路径，如果不写绝对路径，这个文件就在当前目录生成（/usr/local/nginx/consul/）",-1),bn=n("p",null,"2、验证consul-template 由于consul-template在前台运行，所以我们在打开一个nginx终端验证。",-1),wn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"#查看下进程")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx ~]# ps -ef | grep consul-template")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"root     22954 22794  0 16:08 pts/0    00:00:00 consul-template --consul-addr 172.18.18.33:8500 --template ./nginx.ctmpl:vhost.conf --log-level=info")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"#查看下consul目录下的文件")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx ~]# cd /usr/local/nginx/consul/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx consul]# ls")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"nginx.ctmpl  vhost.conf")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Nn=n("p",null,"在consul目录下，是不是发现多了一个文件vhost.conf，就是刚才启动consul-template进程时生成的。",-1),Rn=n("p",null,"在来查看下vhost.conf的内容，目前upstraem配置为空，还没有docker主机加入进来：",-1),In=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx consul]# cat vhost.conf ")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"upstream http_backend {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"server {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    listen 8000;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    server_name localhost;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    location / {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    proxy_pass http://http_backend;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    }")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),$n=n("p",null,"接下来去配置下docker主机。",-1),En={id:"_6-部署docker",tabindex:"-1"},Sn=n("blockquote",null,[n("p",null,"在docker01和docker02上操作")],-1),zn=n("p",null,"先来说一下在docker服务器上操作的大概思路：",-1),Pn=n("li",null,"分别在两台docker服务器上都创建registrator容器，注意到consul服务中心；",-1),On=n("li",null,"在docker01上运行两台nginx容器（端口81、82），在docker02上运行两台nginx容器（端口83、84）；",-1),Un=n("li",null,"修改这4台nginx容器中的index.html页面内容为（docker01:81、docker01:82、docker02:83、docker02:84）",-1),Vn=n("li",null,"访问consul web界面验证",-1),qn={id:"_6-1-安装docker服务",tabindex:"-1"},Tn={id:"_6-2-创建registrator容器",tabindex:"-1"},Fn=n("p",null,"分别在docker 01 和docker 02 上都创建：",-1),jn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker01 /]# docker run -d --name registrator --network=host -v /var/run/docker.sock:/tmp/docker.sock --restart=always gliderlabs/registrator:latest --ip 172.18.18.34 consul://172.18.18.33:8500")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker02 /]# docker run -d --name registrator --network=host -v /var/run/docker.sock:/tmp/docker.sock --restart=always gliderlabs/registrator:latest --ip 172.18.18.35 consul://172.18.18.33:8500")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Bn=n("p",null,"参数说明： --network：把运行的docker容器设定为host网络模式； -v /var/run/docker.sock：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中； --ip : 刚才把network指定了host模式，所以我们指定下IP为宿主机的IP； consul:j最后这个选项是配置consul服务器的IP和端口。",-1),Hn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"### 6.3 启动nginx容器")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Ln=n("p",null,"1、先在docker01上启动第1台nginx，也就是端口为81的容器：",-1),Jn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker01 /]#docker run -itd --name nginx_81 -p 81:80 nginx")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Zn=n("p",null,"进入容器修改index.html：",-1),Kn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker01 /]# docker exec -it nginx_81 bash")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"root@272533504ab0:/# cd /usr/share/nginx/html/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},'root@272533504ab0:/usr/share/nginx/html# echo  "docker01:81" > index.html ')]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Mn=n("p",null,"在去nginx服务器上验证下vhost.conf，从下面可以看到docker01的nginx 81注册进来了：",-1),Wn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@nginx consul]# cat vhost.conf ")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"upstream http_backend {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    server 172.18.18.34:81;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"server {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    listen 8000;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    server_name localhost;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    location / {")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    proxy_pass http://http_backend;")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"    }")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"}")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Yn=n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/f9e6667d74a7be1d42284ffdffb4574d.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"},null,-1),Gn=n("p",null,"2、在docker01上启动第2台nginx，也就是端口为82的容器，并修改好index.html：",-1),Qn=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker01 /]# docker run -itd --name nginx_82 -p 82:80 nginx")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker /]# docker exec -it nginx_82  bash")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"root@b66febfa0753:/# cd /usr/share/nginx/html/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},'root@b66febfa0753:/usr/share/nginx/html# echo  "docker01:82" > index.html ')]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),Xn=n("p",null,[l("在去nginx服务器上验证下vhost.conf，从下面可以看到docker01的nginx 82也注册进来了： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/875b40266e4604d164bde45162d241f2.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"})],-1),nl=n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/e65f922f8c5d94cd4747c491c446f510.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"},null,-1),ll=n("p",null,[l("然后，在看看NODES，从下图可以看出，刚才创建的两个nginx容器（81、82）都注册到了server01这台consul服务器，如果我们的consul是集群环境的话，可以分别注册到server02或server03中： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/75754c5d4892ed121ef07809d531bcc4.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"})],-1),sl=n("p",null,"3、把docker02服务器上的nginx容器83和84也创建了 创建nginx:83",-1),el=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker02 /]# docker run -itd --name nginx_83 -p 83:80 nginx")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker02 /]# docker exec -it nginx_83 bash")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"root@5c21ba694829:/# cd /usr/share/nginx/html/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},'root@5c21ba694829:/usr/share/nginx/html# echo  "docker02:83" > index.html')]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),ol=n("p",null,"创建nginx:84",-1),tl=n("div",{class:"language-"},[n("span",{class:"copy"}),n("pre",{class:"shiki material-palenight"},[n("code",null,[n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker02 /]# docker run -itd --name nginx_84 -p 84:80 nginx")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"[root@docker02 /]#docker exec -it nginx_84  bash")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},"root@0f9d72ff453b:/# cd /usr/share/nginx/html/")]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}},'root@0f9d72ff453b:/usr/share/nginx/html#  echo  "docker02:84" > index.html')]),l(`
`),n("span",{class:"line"},[n("span",{style:{color:"#A6ACCD"}})])])])],-1),al=n("p",null,[l("4、去nginx服务器上验证vhost.conf： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/5a805084f033178c246e11009878b25d.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"}),l(" 从上图可以看出，docker02服务器上的83和84也自动注册进来了。")],-1),cl=n("p",null,[l("5、在来看看consul服务器上的web界面： "),n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/b01af6a525853a49150d3a9078982d78.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"}),l(" 从上图可以看出，SERVICE中的nginx已经有了4个，并且还多了些其它的服务，这些服务是我docker02上跑的其它应用容器，也都会自动注册进来。")],-1),il=n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/b2ee65f22819aea534d34d1568a95310.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"},null,-1),rl=n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/843ea731f4d6f357ed22541f5a01b546.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"},null,-1),pl=n("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/gitee-backup/img-master/image/6f08d5ad7e7369095d726a3434aad4f7.png",alt:"基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架"},null,-1),ul=n("p",null,"到此，自动注册服务的过程就完成了，想要详细了解consul的朋友可以参考官方文档：",-1);function dl(t,gl,hl,_l,i,Cl){const e=h,r=p;return g(),d(r,{frontmatter:i.frontmatter,data:i.data},{"main-content-md":s(()=>[n("h1",A,[l("基于Consul+Registrator+Nginx实现容器服务自动发现的集群框架 "),o(e,{class:"header-anchor",href:"#基于consul-registrator-nginx实现容器服务自动发现的集群框架","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),m,x,n("h2",k,[l("1.了解consul "),o(e,{class:"header-anchor",href:"#_1-了解consul","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),f,n("ul",null,[n("li",null,[o(e,{href:"https://www.consul.io/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("consul 文档")]),_:1})]),n("li",null,[o(e,{href:"https://github.com/hashicorp/consul",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("consul github")]),_:1})])]),n("h3",y,[l("1.1 架构设计 "),o(e,{class:"header-anchor",href:"#_1-1-架构设计","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),D,v,b,w,N,n("h3",R,[l("1.2 架构优势 "),o(e,{class:"header-anchor",href:"#_1-2-架构优势","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),I,$,n("h2",E,[l("2.环境说明 "),o(e,{class:"header-anchor",href:"#_2-环境说明","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),S,z,n("h2",P,[l("3.部署nginx "),o(e,{class:"header-anchor",href:"#_3-部署nginx","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),O,n("h3",U,[l("3.1 安装nginx "),o(e,{class:"header-anchor",href:"#_3-1-安装nginx","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),V,q,T,F,n("h3",j,[l("3.2 安装consul-template "),o(e,{class:"header-anchor",href:"#_3-2-安装consul-template","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),n("p",null,[l("安装consul-template非常简单，下载二进制包即可使用 1、下载consul-template 下载地址："),o(e,{href:"https://releases.hashicorp.com/consul-template/0.19.3/consul-template_0.19.3_linux_amd64.zip",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://releases.hashicorp.com/consul-template/0.19.3/consul-template_0.19.3_linux_amd64.zip")]),_:1})]),B,H,L,n("h2",J,[l("4.部署consul "),o(e,{class:"header-anchor",href:"#_4-部署consul","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Z,n("h3",K,[l("4.1 安装consul "),o(e,{class:"header-anchor",href:"#_4-1-安装consul","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),n("p",null,[l("有两种方式安装consul（容器、二进制包），在本文中选使用二制包的方式。 1、下载consul二进制包 下载地址 "),o(e,{href:"https://www.consul.io/downloads.html",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://www.consul.io/downloads.html")]),_:1})]),M,W,Y,G,Q,X,nn,ln,n("h3",sn,[l("4.2 查看consul集群信息 "),o(e,{class:"header-anchor",href:"#_4-2-查看consul集群信息","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),en,n("h3",on,[l("4.3 通过http api获取集群信息 "),o(e,{class:"header-anchor",href:"#_4-3-通过http-api获取集群信息","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),tn,n("p",null,[l("一般我们通过 "),o(e,{href:"http://xn--consul-gf4jr3wwp4b:8500/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("http://consul服务器:8500")]),_:1}),l(" web界面来访问查看： "),an,l(" 从上图可以看到，consul 界面有5个菜单项（SERVICES、NODES、KEY/VALUE、ACL、DC1）。在SERVICES中，目前因为没有任何服务加入进来，只显示了consul它自己的服务状态。")]),cn,rn,n("h2",pn,[l("5.配置nginx "),o(e,{class:"header-anchor",href:"#_5-配置nginx","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),un,dn,gn,n("h3",hn,[l("5.1 创建nginx.ctmpl模板 "),o(e,{class:"header-anchor",href:"#_5-1-创建nginx-ctmpl模板","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),_n,Cn,n("h3",An,[l("5.2 修改nginx.conf "),o(e,{class:"header-anchor",href:"#_5-2-修改nginx-conf","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),mn,xn,kn,n("h3",fn,[l("5.3 运行consul-template进程 "),o(e,{class:"header-anchor",href:"#_5-3-运行consul-template进程","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),yn,Dn,vn,bn,wn,Nn,Rn,In,$n,n("h2",En,[l("6.部署docker "),o(e,{class:"header-anchor",href:"#_6-部署docker","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Sn,zn,n("ul",null,[Pn,On,Un,Vn,n("li",null,[l("访问nginx服务器地址 "),o(e,{href:"http://172.18.18.32:8000/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("http://172.18.18.32:8000")]),_:1}),l(" 进行验证；")])]),n("h3",qn,[l("6.1 安装docker服务 "),o(e,{class:"header-anchor",href:"#_6-1-安装docker服务","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),n("blockquote",null,[n("p",null,[l("安装过程省略，可参考笔者这篇文章进行安装 "),o(e,{href:"https://blog.51cto.com/ganbing/2050621",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("《docker环境安装（Ubuntu、Centos）》")]),_:1})])]),n("h3",Tn,[l("6.2 创建registrator容器 "),o(e,{class:"header-anchor",href:"#_6-2-创建registrator容器","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Fn,jn,Bn,Hn,Ln,Jn,Zn,Kn,Mn,Wn,n("p",null,[l("然后访问一下nginx服务器的IP地址，"),o(e,{href:"http://172.18.18.32:8000/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("http://172.18.18.32:8000")]),_:1}),l(" ，从下图可以看出是可以访问的： "),Yn]),Gn,Qn,Xn,n("p",null,[l("接着，我们访问下consul服务的web界面，"),o(e,{href:"http://172.18.18.33:8500/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("http://172.18.18.33:8500")]),_:1}),l(" ，从下图可以看出，在SERVICE中是不是发现多了个nginx 服务： "),nl]),ll,sl,el,ol,tl,al,cl,n("p",null,[l("6、访问nginx服务器做最后的验证，"),o(e,{href:"http://172.18.18.32:8000/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("http://172.18.18.32:8000")]),_:1}),l(" ，记得用f5刷新验证： "),il,l(" F5刷新一下页面： "),rl,l(" 在刷新一下，是不是访问到了docker02这台主机了： "),pl]),ul,n("p",null,[l("consul 官方下载："),o(e,{href:"https://www.consul.io/downloads.html",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://www.consul.io/downloads.html")]),_:1}),l(" consul官方集群安装："),o(e,{href:"https://www.consul.io/intro/getting-started/join.html",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://www.consul.io/intro/getting-started/join.html")]),_:1}),l(" consul github ："),o(e,{href:"https://github.com/hashicorp/consul",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://github.com/hashicorp/consul")]),_:1}),l(" consul官方镜像： "),o(e,{href:"https://hub.docker.com/_/consul/",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://hub.docker.com/_/consul/")]),_:1}),l(" 原作: "),o(e,{href:"https://blog.51cto.com/ganbing/2086851",target:"_blank",rel:"noreferrer"},{default:s(()=>[l("https://blog.51cto.com/ganbing/2086851")]),_:1})])]),"main-header":s(()=>[a(t.$slots,"main-header")]),"main-header-after":s(()=>[a(t.$slots,"main-header-after")]),"main-nav":s(()=>[a(t.$slots,"main-nav")]),"main-content":s(()=>[a(t.$slots,"main-content")]),"main-content-after":s(()=>[a(t.$slots,"main-content-after")]),"main-nav-before":s(()=>[a(t.$slots,"main-nav-before")]),"main-nav-after":s(()=>[a(t.$slots,"main-nav-after")]),comment:s(()=>[a(t.$slots,"comment")]),footer:s(()=>[a(t.$slots,"footer")]),aside:s(()=>[a(t.$slots,"aside")]),"aside-custom":s(()=>[a(t.$slots,"aside-custom")]),default:s(()=>[a(t.$slots,"default")]),_:3},8,["frontmatter","data"])}const Dl=u(C,[["render",dl]]);export{yl as __pageData,Dl as default};
