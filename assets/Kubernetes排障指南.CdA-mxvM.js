import{_ as b}from"./ValaxyMain.vue_vue_type_style_index_0_lang.Bv-Ltzoo.js";import"./chunks/@vueuse/motion.BITvz5PP.js";import{e as g,u as m,a as h}from"./chunks/vue-router.ClANm_mH.js";import{aa as k,ap as e,ag as a,af as l,ai as n,P as v,ab as y,a1 as P}from"./framework.GHZxz7jq.js";import"./index.Dp3W9g7b.js";import"./chunks/dayjs.BldX5ftQ.js";import"./chunks/vue-i18n.C7V8WoQZ.js";import"./chunks/pinia.BfAlK2F6.js";import"./chunks/nprogress.BZwbcB2O.js";/* empty css                    */import"./YunComment.vue_vue_type_style_index_0_lang.C3MeNfs5.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.fblE3Fel.js";import"./post.G7lgMgan.js";const f=g("/posts/Kubernetes排障指南",async i=>JSON.parse('{"title":"Kubernetes排障指南","description":"","frontmatter":{"title":"Kubernetes排障指南","categories":"Kubernetes","tags":["Kubernetes排障指南"],"date":"2022-10-09 10:55:24"},"headers":[],"relativePath":"pages/posts/Kubernetes排障指南.md","lastUpdated":null}'),{lazy:(i,o)=>i.name===o.name}),M={__name:"Kubernetes排障指南",setup(i,{expose:o}){const{data:u}=f(),p=h(),r=m(),t=Object.assign(r.meta.frontmatter||{},u.value?.frontmatter||{});return p.currentRoute.value.data=u.value,P("valaxy:frontmatter",t),globalThis.$frontmatter=t,o({frontmatter:{title:"Kubernetes排障指南",categories:"Kubernetes",tags:["Kubernetes排障指南"],date:"2022-10-09 10:55:24"}}),(s,c)=>{const d=b;return y(),k(d,{frontmatter:v(t)},{"main-content-md":e(()=>[...c[0]||(c[0]=[l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"原文：https://learnk8s.io/troubleshooting-deployments")]),n(`
`),l("span",{class:"line"},[l("span",null,"一份排障指南流程图。")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[l("a",{href:"https://vflong.github.io/assets/files/troubleshooting-kubernetes.pdf",target:"_blank",rel:"noreferrer"},"点击下载 PDF 版本"),n("。")],-1),l("figure",null,[l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes.jpg",alt:"troubleshooting-kubernetes",loading:"lazy",decoding:"async"})],-1),l("p",null,"在 Kubernetes 中部署一个应用，需要定义 3 个组件：",-1),l("ul",null,[l("li",null,"Deployment - 这是创建名为 Pod 的应用程序副本的菜谱"),l("li",null,"Service - 内部负载均衡器，将流量路由到 Pods"),l("li",null,"Ingress - 有关流量如何从集群外部流向您的服务的描述")],-1),l("p",null,"下面是快速的回顾。",-1),l("ol",null,[l("li",null,[n("在 Kubernetes 中，应用程序通过两层负载均衡暴露：内部和外部。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-1.svg",alt:"troubleshooting-kubernetes-1"})]),l("li",null,[n("内部的负载平衡被称为 Service，而外部的被称为 Ingress。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-2.svg",alt:"troubleshooting-kubernetes-2"})]),l("li",null,[n("Pod 并不是被直接部署的，而是通过 Deployment 创建 Pod 并监测。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-3.svg",alt:"troubleshooting-kubernetes-3"})])],-1),l("p",null,[n("假设您希望部署一个简单的 Hello World 应用程序，则该应用程序的 YAML 应该类似于以下内容： "),l("code",null,"hello-world.yaml")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"apiVersion: apps/v1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Deployment")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-deployment")]),n(`
`),l("span",{class:"line"},[l("span",null,"  labels:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    track: canary")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  selector:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    matchLabels:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      any-name: my-app")]),n(`
`),l("span",{class:"line"},[l("span",null,"  template:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      labels:")]),n(`
`),l("span",{class:"line"},[l("span",null,"        any-name: my-app")]),n(`
`),l("span",{class:"line"},[l("span",null,"    spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      containers:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      - name: cont1")]),n(`
`),l("span",{class:"line"},[l("span",null,"        image: learnk8s/app:1.0.0")]),n(`
`),l("span",{class:"line"},[l("span",null,"        ports:")]),n(`
`),l("span",{class:"line"},[l("span",null,"        - containerPort: 8080")]),n(`
`),l("span",{class:"line"},[l("span",null,"---")]),n(`
`),l("span",{class:"line"},[l("span",null,"apiVersion: v1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Service")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-service")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  ports:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  - port: 80")]),n(`
`),l("span",{class:"line"},[l("span",null,"    targetPort: 8080")]),n(`
`),l("span",{class:"line"},[l("span",null,"  selector:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    name: app")]),n(`
`),l("span",{class:"line"},[l("span",null,"---")]),n(`
`),l("span",{class:"line"},[l("span",null,"apiVersion: networking.k8s.io/v1beta1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Ingress")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-ingress")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  rules:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  - http:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    paths:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    - backend:")]),n(`
`),l("span",{class:"line"},[l("span",null,"        serviceName: app")]),n(`
`),l("span",{class:"line"},[l("span",null,"        servicePort: 80")]),n(`
`),l("span",{class:"line"},[l("span",null,"      path: /")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"定义很长，很容易忽略组件之间的相互关系。",-1),l("p",null,"例如：",-1),l("ul",null,[l("li",null,"何时使用 80 端口？何时使用 8080 端口？"),l("li",null,"是否应该为每个服务创建一个新端口，避免冲突？"),l("li",null,"标签名称重要吗？到处都应该一样吗？")],-1),l("p",null,"在进行调试之前，让我们回顾一下这三个组件如何相互连接。",-1),l("p",null,"我们从 Deployment 和 Service 开始。",-1),l("h1",{id:"连接-deployment-和-service",tabindex:"-1"},[n("连接 Deployment 和 Service "),l("a",{class:"header-anchor",href:"#连接-deployment-和-service","aria-label":'Permalink to "连接 Deployment 和 Service"'},"​")],-1),l("p",null,"令人惊讶的消息是 Service 和 Deployment 根本没有连接。",-1),l("p",null,"相反，Service 端直接连接了 Pod，完全跳过了 Deployment。",-1),l("p",null,"所以你应该关心 Pod 和 Serivce 之前是如何相互关联的。",-1),l("p",null,"你应该注意以下 3 点：",-1),l("ul",null,[l("li",null,"Service 选择器（selector）应该匹配至少一个 Pod 的标签（label）"),l("li",null,[n("Service "),l("code",null,"targetPort"),n(" 应该匹配 Pod 内部容器内的的 "),l("code",null,"containerPort")]),l("li",null,[n("Service "),l("code",null,"port"),n(" 可以是任何数字。因为 Serivce 有不同的 IP 地址，所以多个 Service 可以使用相同的端口。")])],-1),l("p",null,"下图总结了如何连接端口：",-1),l("ol",null,[l("li",null,[n("通过 Service 暴露下面的 Pod。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-4.svg",alt:"troubleshooting-kubernetes-4"})]),l("li",null,[n("创建 Pod 时，应为 Pod 中的每个容器定义 "),l("code",null,"containerPort"),n("。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-5.svg",alt:"troubleshooting-kubernetes-5"})]),l("li",null,[n("创建服务时，您可以定义 "),l("code",null,"port"),n(" 和 "),l("code",null,"targetPort"),n("，但是您应该选择连接哪一个容器？ "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-6.svg",alt:"troubleshooting-kubernetes-6"})]),l("li",null,[l("code",null,"tagetPort"),n(" 和 "),l("code",null,"containerPort"),n(" 应该总是匹配。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-7.svg",alt:"troubleshooting-kubernetes-7"})]),l("li",null,[n("如果您的容器暴露了端口 3000，那么 "),l("code",null,"targetPort"),n(" 应该总是匹配这个数字。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-8.svg",alt:"troubleshooting-kubernetes-8"})])],-1),l("p",null,[n("如果您查看 YAML 文件，可以发现标签和 "),l("code",null,"ports"),n("/"),l("code",null,"targetPort"),n(" 应该匹配：")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"hello-world.yaml")]),n(`
`),l("span",{class:"line"},[l("span",null,"apiVersion: apps/v1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Deployment")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-deployment")]),n(`
`),l("span",{class:"line"},[l("span",null,"  labels:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    track: canary")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  selector:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    matchLabels:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      any-name: my-app")]),n(`
`),l("span",{class:"line"},[l("span",null,"  template:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      labels:")]),n(`
`),l("span",{class:"line"},[l("span",null,"        any-name: my-app")]),n(`
`),l("span",{class:"line"},[l("span",null,"    spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      containers:")]),n(`
`),l("span",{class:"line"},[l("span",null,"      - name: cont1")]),n(`
`),l("span",{class:"line"},[l("span",null,"        image: learnk8s/app:1.0.0")]),n(`
`),l("span",{class:"line"},[l("span",null,"        ports:")]),n(`
`),l("span",{class:"line"},[l("span",null,"        - containerPort: 8080")]),n(`
`),l("span",{class:"line"},[l("span",null,"---")]),n(`
`),l("span",{class:"line"},[l("span",null,"apiVersion: v1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Service")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-service")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  ports:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  - port: 80")]),n(`
`),l("span",{class:"line"},[l("span",null,"    targetPort: 8080")]),n(`
`),l("span",{class:"line"},[l("span",null,"  selector:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    any-name: my-app")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[n("Deployment 部分中的 "),l("code",null,"track: canary"),n(" 是什么意思？")],-1),l("p",null,"那也应该匹配吗？",-1),l("p",null,"该标签属于 Deployment，Service 的选择器（selector）不使用它来路由流量。",-1),l("p",null,"换句话说，您可以安全地删除或为其分配其他值。",-1),l("p",null,[n("那么 "),l("code",null,"matchLabels"),n(" 选择器呢？")],-1),l("p",null,[l("strong",null,"它始终必须匹配 Pod 标签"),n("，因为它是 Deployment 用来追踪 Pod 的。")],-1),l("p",null,"假设您做出了正确的更改，如何测试它？",-1),l("p",null,"您可以使用一下命令检查 Pod 是否具有正确的标签：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl get pods --show-labels")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"或者您有属于多个应用的 Pod：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl get pods --selector any-name=my-app --show-labels")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[n("其中 "),l("code",null,"any-time=my-app"),n(" 表示标签 "),l("code",null,"any-name: my-app"),n("。")],-1),l("p",null,"仍然存在问题？",-1),l("p",null,"您可以直接连接 Pod！",-1),l("p",null,[n("您可以在 kubectl 中使用 "),l("code",null,"port-forward"),n(" 命令连接 Service 并测试连接。")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl port-forward service/<service_name> 3000:80")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"其中：",-1),l("ul",null,[l("li",null,[l("code",null,"service/<service_name>"),n(" 是 service 的名称 - 在当前 YAML 中是“my-service”。")]),l("li",null,"3000 是您想要在您的电脑中开放的端口"),l("li",null,[n("80 是 Service 中 "),l("code",null,"port"),n(" 字段暴露的端口")])],-1),l("p",null,"如果您能够连接，说明设置是正确的。",-1),l("p",null,"如果您不能，那么您很可能配错了一个标签或者端口不匹配。",-1),l("h1",{id:"连接-service-和-ingress",tabindex:"-1"},[n("连接 Service 和 Ingress "),l("a",{class:"header-anchor",href:"#连接-service-和-ingress","aria-label":'Permalink to "连接 Service 和 Ingress"'},"​")],-1),l("p",null,"下一步暴露您的应用的步骤是配置 Ingress。",-1),l("p",null,"Ingress 必须知道如何获取到 Service 然后获取到 Pod 并路由流量到它们。",-1),l("p",null,"Ingress 获取根据名称和暴露的端口获取到正确的 Service。",-1),l("p",null,"Ingress 和 Service 中的两个属性应该匹配：",-1),l("ol",null,[l("li",null,[n("Ingress 的 "),l("code",null,"servicePort"),n(" 应该匹配 Service 中的 "),l("code",null,"port")]),l("li",null,[n("Ingress 中的 "),l("code",null,"serviceName"),n(" 应该匹配 Service 中的 "),l("code",null,"name")])],-1),l("p",null,"下图总结了如何连接端口：",-1),l("ol",null,[l("li",null,[n("您已经知道 Service 暴露了一个 "),l("code",null,"port"),n("。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-9.svg",alt:"troubleshooting-kubernetes-9"})]),l("li",null,[n("Ingress 中有一个字段叫做 "),l("code",null,"servicePort"),n("。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-10.svg",alt:"troubleshooting-kubernetes-10"})]),l("li",null,[n("Service 的 "),l("code",null,"port"),n(" 和 Ingress 的 "),l("code",null,"servicePort"),n(" 应该总是匹配。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-11.svg",alt:"troubleshooting-kubernetes-11"})]),l("li",null,[n("如果您决定分配端口 80 给 service，您应该也修改 "),l("code",null,"servicePort"),n(" 为 80。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-12.svg",alt:"troubleshooting-kubernetes-12"})])],-1),l("p",null,"在实践中，您应该查看以下几行：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"hello-world.yaml")]),n(`
`),l("span",{class:"line"},[l("span",null,"apiVersion: v1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Service")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-service")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  ports:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  - port: 80")]),n(`
`),l("span",{class:"line"},[l("span",null,"    targetPort: 8080")]),n(`
`),l("span",{class:"line"},[l("span",null,"  selector:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    any-name: my-app")]),n(`
`),l("span",{class:"line"},[l("span",null,"---")]),n(`
`),l("span",{class:"line"},[l("span",null,"apiVersion: networking.k8s.io/v1beta1")]),n(`
`),l("span",{class:"line"},[l("span",null,"kind: Ingress")]),n(`
`),l("span",{class:"line"},[l("span",null,"metadata:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  name: my-ingress")]),n(`
`),l("span",{class:"line"},[l("span",null,"spec:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  rules:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  - http:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    paths:")]),n(`
`),l("span",{class:"line"},[l("span",null,"    - backend:")]),n(`
`),l("span",{class:"line"},[l("span",null,"        serviceName: my-service")]),n(`
`),l("span",{class:"line"},[l("span",null,"        servicePort: 80")]),n(`
`),l("span",{class:"line"},[l("span",null,"      path: /")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"您该如何测试 Ingress 的功能？",-1),l("p",null,[n("您可以对 "),l("code",null,"kubectl port-forward"),n(" 使用与之前相同的策略，但是应该连接到 Ingress 控制器，而不是连接到 Service。")],-1),l("p",null,"首先，使用以下命令获取 Ingress 控制器的 Pod 名称：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl get pods --all-namespaces")]),n(`
`),l("span",{class:"line"},[l("span",null,"NAMESPACE   NAME                              READY STATUS")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system coredns-5644d7b6d9-jn7cq          1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system etcd-minikube                     1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-apiserver-minikube           1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-controller-manager-minikube  1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-proxy-zvf2h                  1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-scheduler-minikube           1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system nginx-ingress-controller-6fc5bcc  1/1   Running")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"找出 Ingress Pod（可能在其他 Namespace 中）并描述它以获取端口：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl describe pod nginx-ingress-controller-6fc5bcc \\")]),n(`
`),l("span",{class:"line"},[l("span",null," --namespace kube-system \\")]),n(`
`),l("span",{class:"line"},[l("span",null," | grep Ports")]),n(`
`),l("span",{class:"line"},[l("span",null,"Ports:         80/TCP, 443/TCP, 18080/TCP")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"最后，连接 Pod：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl port-forward nginx-ingress-controller-6fc5bcc 3000:80 --namespace kube-system")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"此时，每次您访问计算机上的端口 3000 时，请求都会转发到 Ingress 控制器 Pod 上的端口 80。",-1),l("p",null,[n("如果您访问 "),l("a",{href:"http://localhost:3000/",target:"_blank",rel:"noreferrer"},"http://localhost:3000"),n("，则应该可以找到提供网页的应用程序。")],-1),l("h1",{id:"关于-port-的总结回顾",tabindex:"-1"},[n("关于 port 的总结回顾 "),l("a",{class:"header-anchor",href:"#关于-port-的总结回顾","aria-label":'Permalink to "关于 port 的总结回顾"'},"​")],-1),l("p",null,"快速回顾一下哪些端口和标签应该匹配：",-1),l("ol",null,[l("li",null,"Service selector 应该匹配 Pod 的 label"),l("li",null,[n("Service 的 "),l("code",null,"targetPort"),n(" 应该匹配 Pod 中容器的 "),l("code",null,"containerPort")]),l("li",null,"Service 的 port 可以是任意值。多个 Service 可以使用相同的 port，因为它们被分配了不同的 IP 地址"),l("li",null,[n("Ingress 的 "),l("code",null,"servicePort"),n(" 应该匹配 Service 的 "),l("code",null,"port")]),l("li",null,[n("Service 的 "),l("code",null,"name"),n(" 应该匹配 Ingress 的 "),l("code",null,"serviceName")])],-1),l("p",null,"知道如何构造 YAML 定义只是故事的一部分。",-1),l("p",null,"出了问题怎么办？",-1),l("p",null,"Pod 可能无法启动，或者正在崩溃。",-1),l("h1",{id:"排查-kubernetes-deployment-故障的-3-个步骤",tabindex:"-1"},[n("排查 Kubernetes deployment 故障的 3 个步骤 "),l("a",{class:"header-anchor",href:"#排查-kubernetes-deployment-故障的-3-个步骤","aria-label":'Permalink to "排查 Kubernetes deployment 故障的 3 个步骤"'},"​")],-1),l("p",null,"在深入 Debug 崩溃的 Deployment 之前，必须把 Kubernetes 的工作方式铭记于心。",-1),l("p",null,"由于每个 deployment 包含 3 个组件，因此您必须从底层开始依次 debug 这些组件。",-1),l("ol",null,[l("li",null,"您应该确保 Pod 处于 running 状态，然后"),l("li",null,"专注于让服务将流量路由到 Pod，然后"),l("li",null,"检查 Ingress 配置是否正确")],-1),l("p",null,"详细操作如下：",-1),l("ol",null,[l("li",null,[n("您应该从底层开始对 Deployment 进行故障排查。首先检查 Pod 就绪并正在运行。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-13.svg",alt:"troubleshooting-kubernetes-13"})]),l("li",null,[n("如果 Pod 已就绪，则应调查服务是否可以将流量分配到 Pod。 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-14.svg",alt:"troubleshooting-kubernetes-14"})]),l("li",null,[n("最后您应该检查 Service 与 Ingress 之间的连接 "),l("img",{src:"https://cos.vlinux.cn/www-vlinux-cn-blog-img/troubleshooting-kubernetes-15.svg",alt:"troubleshooting-kubernetes-15"})])],-1),l("h2",{id:"_1-排查-pod-故障",tabindex:"-1"},[n("1. 排查 Pod 故障 "),l("a",{class:"header-anchor",href:"#_1-排查-pod-故障","aria-label":'Permalink to "1. 排查 Pod 故障"'},"​")],-1),l("p",null,"大部分情况下，问题出现在 Pod 自身。",-1),l("p",null,[n("您应该确认您的 Pod 已经处于 "),l("em",null,"Running"),n(" 和 "),l("em",null,"Ready"),n(" 状态。")],-1),l("p",null,"您如何开始检查？",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl get pods")]),n(`
`),l("span",{class:"line"},[l("span",null,"NAME                    READY STATUS            RESTARTS  AGE")]),n(`
`),l("span",{class:"line"},[l("span",null,"app1                    0/1   ImagePullBackOff  0         47h")]),n(`
`),l("span",{class:"line"},[l("span",null,"app2                    0/1   Error             0         47h")]),n(`
`),l("span",{class:"line"},[l("span",null,"app3-76f9fcd46b-xbv4k   1/1   Running           1         47h")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[n("在上面的会话中，最后一个 Pod 已经处于 "),l("em",null,"Running"),n(" 和 "),l("em",null,"Ready"),n(" 状态 —— 然而，前两个 Pod 并未处于 "),l("em",null,"Running"),n(" 或 "),l("em",null,"Ready"),n(" 状态。")],-1),l("p",null,[l("em",null,"您如何调查出了什么问题？")],-1),l("p",null,"有 4 个常用的命令可以用来排查 Pod 故障：",-1),l("ol",null,[l("li",null,[l("code",null,"kubectl logs <pod name>"),n(" 有助于获取 Pod 容器的日志")]),l("li",null,[l("code",null,"kubectl describe pod <pod name>"),n(" 用于获取 Pod 相关的事件列表")]),l("li",null,[l("code",null,"kubectl get po <pod name>"),n(" 用于提取存储在 Kubernetes 中的 Pod 的 YAML 定义")]),l("li",null,[l("code",null,"kubectl exec -it <pod name> bash"),n(" 用于在 Pod 内的容器中运行一个交互式命令")])],-1),l("p",null,"您应该选择哪一个？",-1),l("p",null,"没有一个命令是万能的。",-1),l("p",null,"相反，您应该结合使用它们。",-1),l("h3",{id:"常见-pod-错误",tabindex:"-1"},[n("常见 Pod 错误 "),l("a",{class:"header-anchor",href:"#常见-pod-错误","aria-label":'Permalink to "常见 Pod 错误"'},"​")],-1),l("p",null,"Pod 可能会出现启动或运行时错误。",-1),l("p",null,"启动错误如下：",-1),l("ul",null,[l("li",null,"ImagePullBackOff"),l("li",null,"ImageInspectError"),l("li",null,"ErrImagePull"),l("li",null,"ErrImageNeverPull"),l("li",null,"RegistryUnavailavle"),l("li",null,"InvalidImageName")],-1),l("p",null,"运行时错误如下：",-1),l("ul",null,[l("li",null,"CrashLoopBackOff"),l("li",null,"RunContainerError"),l("li",null,"KillContainerError"),l("li",null,"VerifyNonRootError"),l("li",null,"RunInitContainerError"),l("li",null,"CreatePodSandboxError"),l("li",null,"ConfigPodSandboxError"),l("li",null,"KillPodSandboxError"),l("li",null,"SetupNetworkError"),l("li",null,"TeardownNetworkError")],-1),l("p",null,"有些错误比其他错误更常见。",-1),l("p",null,"以下是最常见的错误以及如何修复它们的列表。",-1),l("h4",{id:"imagepullbackoff",tabindex:"-1"},[n("ImagePullBackOff "),l("a",{class:"header-anchor",href:"#imagepullbackoff","aria-label":'Permalink to "ImagePullBackOff"'},"​")],-1),l("p",null,"这个错误出现的原因是 Kubernetes 不能拉取到 Pod 中的一个容器的镜像。",-1),l("p",null,"有以下 3 中常见的原因：",-1),l("ol",null,[l("li",null,"镜像名称无效 —— 例如，您错误输入了名称，或者镜像不存在"),l("li",null,"您为镜像指定了一个不存在的 tag"),l("li",null,"您试图拉取的镜像属于一个私有注册中心，并且 Kubernetes 没有权限访问它")],-1),l("p",null,"前两种情况可以通过修正镜像名称和 tag 来解决。",-1),l("p",null,"对于最后一种情况，您应该将凭证添加到 Secret 中的私有注册中心，并在 Pod 中引用它。",-1),l("p",null,[l("a",{href:"https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/",target:"_blank",rel:"noreferrer"},"官方文档中有一个如何实现此目标的示例。")],-1),l("h4",{id:"crashloopbackoff",tabindex:"-1"},[n("CrashLoopBackOff "),l("a",{class:"header-anchor",href:"#crashloopbackoff","aria-label":'Permalink to "CrashLoopBackOff"'},"​")],-1),l("p",null,"如果容器无法启动，则 Kubernetes 将 CrashLoopBackOff 消息显示为状态。",-1),l("p",null,"通常，在以下情况下容器无法启动：",-1),l("ol",null,[l("li",null,"应用程序中存在错误，导致无法启动"),l("li",null,[n("您"),l("a",{href:"https://stackoverflow.com/questions/41604499/my-kubernetes-pods-keep-crashing-with-crashloopbackoff-but-i-cant-find-any-lo",target:"_blank",rel:"noreferrer"},"未正确配置容器")]),l("li",null,"Liveness 探针失败次数过多")],-1),l("p",null,"您应该尝试从该容器中获取日志以调查其失败的原因。",-1),l("p",null,"如果由于容器重启太快而看不到日志，则可以使用以下命令：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl logs <pod-name> --previous")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"以上命令会打印前一个容器错误信息。",-1),l("h4",{id:"runcontainererror",tabindex:"-1"},[n("RunContainerError "),l("a",{class:"header-anchor",href:"#runcontainererror","aria-label":'Permalink to "RunContainerError"'},"​")],-1),l("p",null,"当容器无法启动时出现错误。",-1),l("p",null,"设置在容器内的应用程序启动之前。",-1),l("p",null,"该问题通常是由于配置错误，例如：",-1),l("ul",null,[l("li",null,"挂载不存在的卷，例如 ConfigMap 或 Secrets"),l("li",null,"将只读卷挂载为可读写")],-1),l("p",null,[n("您应该使用 "),l("code",null,"kubectl describe pod <pod-name> "),n("来收集并分析错误信息。")],-1),l("h4",{id:"pod-处于-pending-状态",tabindex:"-1"},[n("Pod 处于 "),l("em",null,"Pending"),n(" 状态 "),l("a",{class:"header-anchor",href:"#pod-处于-pending-状态","aria-label":'Permalink to "Pod 处于 *Pending* 状态"'},"​")],-1),l("p",null,[n("当您创建一个 Pod 时，该 Pod 保持处于 "),l("em",null,"Pending"),n(" 状态。")],-1),l("p",null,"为什么？",-1),l("p",null,"假设您的调度程序组件运行良好，原因如下：",-1),l("ol",null,[l("li",null,"集群没有足够的资源（例如 CPU 和内存）来运行 Pod"),l("li",null,"当前的 Namespace 具有 ResourceQuota 对象，创建 Pod 将使 Namespace 超过配额"),l("li",null,[n("该 Pod 绑定到了一个处于 "),l("em",null,"Pending"),n(" 状态的 PersistenVolumeClain")])],-1),l("p",null,[n("最好的选择是检查 "),l("code",null,"kubectl describe"),n(" 命令中的 "),l("em",null,"Events"),n(" 部分：")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl describe pod <pod name>")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"对于由于 ResourceQuotas 而造成的错误，可以使用以下方法检查集群日志：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl get events --sort-by=.metadata.creationTimestamp")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("h4",{id:"pod-未处于-ready-状态",tabindex:"-1"},[n("Pod 未处于 "),l("em",null,"Ready"),n(" 状态 "),l("a",{class:"header-anchor",href:"#pod-未处于-ready-状态","aria-label":'Permalink to "Pod 未处于 *Ready* 状态"'},"​")],-1),l("p",null,[n("如果一个 Pod 处于 "),l("em",null,"Running"),n(" 状态但并未 "),l("em",null,"Ready"),n("，这说明 Readiness 探针失败了。")],-1),l("p",null,"当 Readiness 探针失败时，Pod 未连接到 Service，并且没有流量转发到该实例。",-1),l("p",null,[n("Readiness 探针失败是特定于应用程序的错误，因此您应该检查 "),l("code",null,"kubectl describe"),n(" 中的 "),l("em",null,"Events"),n(" 部分以找出错误。")],-1),l("h2",{id:"_2-排查-service-故障",tabindex:"-1"},[n("2. 排查 Service 故障 "),l("a",{class:"header-anchor",href:"#_2-排查-service-故障","aria-label":'Permalink to "2. 排查 Service 故障"'},"​")],-1),l("p",null,[n("如果 Pod 处于 Running 状态并 "),l("em",null,"Ready"),n("，但仍无法收到应用程序的相应，则应检查 Service 的配置是否正确。")],-1),l("p",null,"Service 旨在根据 Pod 的标签将流量路由至 Pod。",-1),l("p",null,"因此，您应该检查的第一件事是 Service 匹配了多少 Pod。",-1),l("p",null,"您可以通过检查 Service 中的 Endpoint 来做到这一点：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl describe service <service-name> | grep Endpoints")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[n("endpoint 是一对 "),l("code",null,"<ip address: port>"),n("，并且在 Service（至少）有一个 Pod，当 Service 以 Pod 为目标时。")],-1),l("p",null,"如果“Endpoints”部分为空，则有两种解释：",-1),l("ol",null,[l("li",null,"您并没有运行带有正确标签的 Pod（提示：您应检查自己是否在正确的 namespace）"),l("li",null,[n("您在 Service 的 "),l("code",null,"selector"),n(" 的标签中有错别字")])],-1),l("p",null,[n("如果您看到了 endpoints 列表，但仍然无法访问您的应用程序，则 service 中的 "),l("code",null,"targetPort"),n(" 可能是罪魁祸首。")],-1),l("p",null,"您如何测试服务？",-1),l("p",null,[n("无论服务类型如何，都可以使用 "),l("code",null,"kubectl port-forward"),n(" 连接到它：")],-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl port-forward service/<service-name> 3000:80")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"其中：",-1),l("ul",null,[l("li",null,[l("code",null,"<service-name>"),n(" 是 Service 的名称")]),l("li",null,[l("code",null,"3000"),n(" 是您希望在您的电脑上开放的端口")]),l("li",null,[l("code",null,"80"),n(" 是 Service 暴露的端口")])],-1),l("h2",{id:"_3-排查-ingress-故障",tabindex:"-1"},[n("3. 排查 Ingress 故障 "),l("a",{class:"header-anchor",href:"#_3-排查-ingress-故障","aria-label":'Permalink to "3. 排查 Ingress 故障"'},"​")],-1),l("p",null,"如果您已到达本节，则：",-1),l("ul",null,[l("li",null,[n("Pod 处于 "),l("em",null,"Running"),n(" 状态并 "),l("em",null,"Ready")]),l("li",null,"Service 将流量分配到了 Pod")],-1),l("p",null,"但是您仍然看不到应用程序的响应。",-1),l("p",null,"这意味着最有可能是 Ingress 配置错误。",-1),l("p",null,"由于正在使用的 Ingress 控制器是集群中的第三方组件，因此针对 Ingress 控制器的类型有不同的调试技术。",-1),l("p",null,"但是在深入研究 Ingress 专用工具之前，您可以使用一些简单的方法来检查。",-1),l("p",null,"Ingress 使用 serviceName 和 servicePort 连接到 Service。",-1),l("p",null,"您应该检查这些配置是否正确。",-1),l("p",null,"你可以使用以下命令检查 Ingress 是否配置正确：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl describe ingress <ingress-name>")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,[n("如果 "),l("em",null,"Backend"),n(" 列表为空，则配置中必有一个错误。")],-1),l("p",null,[n("如果您可以在 "),l("em",null,"Backend"),n(" 列中看到 endpoint，但是仍然无法访问该应用程序，则可能是以下问题：")],-1),l("ul",null,[l("li",null,"您如何将 Ingress 暴露到互联网"),l("li",null,"您如何将集群暴露到互联网")],-1),l("p",null,"您可以通过直连 Ingress Pod 将基础设施问题与 Ingress 隔离开来。",-1),l("p",null,"首先，获取 Ingress 控制器的 Pod 名称（可以位于其他 namespace）：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl get pods --all-namespaces")]),n(`
`),l("span",{class:"line"},[l("span",null,"NAMESPACE   NAME                              READY STATUS")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system coredns-5644d7b6d9-jn7cq          1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system etcd-minikube                     1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-apiserver-minikube           1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-controller-manager-minikube  1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-proxy-zvf2h                  1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system kube-scheduler-minikube           1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span",null,"kube-system nginx-ingress-controller-6fc5bcc  1/1   Running")]),n(`
`),l("span",{class:"line"},[l("span")]),n(`
`),l("span",{class:"line"},[l("span",null,"$")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"描述它以获取端口：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl describe pod nginx-ingress-controller-6fc5bcc")]),n(`
`),l("span",{class:"line"},[l("span",null," --namespace kube-system \\")]),n(`
`),l("span",{class:"line"},[l("span",null," | grep Ports")]),n(`
`),l("span",{class:"line"},[l("span")]),n(`
`),l("span",{class:"line"},[l("span",null,"$")])])]),l("button",{class:"code-block-unfold-btn"})],-1),l("p",null,"最后，连接到 Pod：",-1),l("div",{class:"language-"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"$ kubectl port-forward nginx-ingress-controller-6fc5bcc 3000:80 --namespace kube-system")])])]),l("button",{class:"code-block-unfold-btn"})],-1)])]),"main-header":e(()=>[a(s.$slots,"main-header")]),"main-header-after":e(()=>[a(s.$slots,"main-header-after")]),"main-nav":e(()=>[a(s.$slots,"main-nav")]),"main-content-before":e(()=>[a(s.$slots,"main-content-before")]),"main-content":e(()=>[a(s.$slots,"main-content")]),"main-content-after":e(()=>[a(s.$slots,"main-content-after")]),"main-nav-before":e(()=>[a(s.$slots,"main-nav-before")]),"main-nav-after":e(()=>[a(s.$slots,"main-nav-after")]),comment:e(()=>[a(s.$slots,"comment")]),footer:e(()=>[a(s.$slots,"footer")]),aside:e(()=>[a(s.$slots,"aside")]),"aside-custom":e(()=>[a(s.$slots,"aside-custom")]),default:e(()=>[a(s.$slots,"default")]),_:3},8,["frontmatter"])}}};export{M as default,f as usePageData};
